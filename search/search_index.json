{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"fyp1_final_report_80369/","text":"{width=\"5.768055555555556in\" height=\"3.785416666666667in\"} FindIt: Simplifying Campus Item Recovery with AI-Driven Lost and Found App Ngu Keh Cong Bachelor's degree in Computer Science with Honours (Software Engineering) 2025 FindIt: Simplifying Campus Item Recovery with AI-Driven Lost and Found App Ngu Keh Cong This project is submitted in partial fulfilment of the requirements for the degree of Bachelor's Degree in Computer Science with Honours (Software Engineering) Faculty of Computer Science and Information Technology UNIVERSITI MALAYSIA SARAWAK 2025 FindIt: Mempermudah Pemulihan Barang Hilang di Kampus dengan Aplikasi Kehilangan dan Penemuan Dipacu AI Ngu Keh Cong Projek ini merupakan salah satu keperluan untuk Izajah Sarjana Muda Sains Komputer dengan Kepujian Fakulti Sains Komputer dan Teknologi Maklumat UNIVERSITI MALAYSIA SARAWAK 2025 DECLARATION {#declaration .unnumbered} I hereby declare that the project is my original work. I have not copied from any other student's work or from any other sources except due to reference or acknowledgement is not made explicitly in the text, nor has any part had been written for me by another person. {width=\"1.1666666666666667in\" height=\"0.6319444444444444in\"} _______________________ (Ngu Keh Cong, 80369) 17^th^ January 2025 Faculty of Computer Science and Information Technology Universiti Malaysia Sarawak ACKNOWLEDGEMENT {#acknowledgement .unnumbered} I would like to express my deepest gratitude to everyone who supported and contributed to the successful completion of this Final Year Project (FYP). Firstly, my heartfelt thanks go to my beloved supervisor, Dr. Wang Hui Hui for giving me the opportunity to work under her supervision. Her invaluable guidance and insightful feedback had been giving me constant support throughout the FYP. I would also like to thank my FYP examiner, Dr. Sze San Nah for her constructive suggestions on my FYP, which greatly increase the project's quality. Furthermore, a special thanks go to FYP coordinator, Prof. Wang Yin Chai for his patience in giving guidelines of FYP, and answering students' questions to ensure a smooth process throughout the FYP journey. Next, I am sincerely grateful to my academic institution, Universiti Malaysia Sarawak (UNIMAS) because it provides the necessary resources, platform, and conducive environment for the students to complete the project. I would also like to acknowledge all the lecturers who have contributed to my academic growth. Furthermore, I am also grateful to my family and friends for their continuous support and tolerance throughout the project. I have found the source of strength and motivation from your moral support. Lastly, I would like to thank everyone who has indirectly contributed during this period. Your support has been invaluable and deeply appreciated. ABSTRACT {#abstract .unnumbered} This project presents \\\"FindIt,\\\" an AI-driven mobile and web-based application designed to address inefficiencies in item recovery within university campuses. The system automates the matching of lost and found items by leveraging image matching technology, which can significantly reduce manual effort of both admin and students, and improving recovery rates. Waterfall model is applied in this project to guide development, and incorporating systematic phases such as requirements gathering, design, implementation, testing, and maintenance. To understand the critical issues with existing informal channels such as fragmented reporting processes and lack of timely update, and the suitable features to be included in the project, user feedback is collected via surveys in Google Form. FindIt is designed to integrate a robust feature set tailored for university students, likes AI-based image matching, real-time notifications, and status tracking of reported items are included in the mobile application. An administrator-focused web interface is also designed to ensure an efficient management of claims and user accounts. The system\\'s effectiveness was evaluated through functional and usability testing to highlights significant improvements in item recovery efficiency, user satisfaction, and system reliability. This project contributes to the application of AI in practical, particularly in improving campus experiences. ABSTRAK {#abstrak .unnumbered} Projek ini memperkenalkan \\\"FindIt,\\\" sebuah aplikasi mudah alih dan berasaskan web yang dipacu oleh AI, direka untuk menangani ketidakefisienan dalam pemulihan barang hilang di kampus universiti. Sistem ini mengautomatikkan padanan barang hilang dan ditemui dengan memanfaatkan teknologi pemadanan imej, yang dapat mengurangkan usaha manual oleh pentadbir dan pelajar, serta meningkatkan kadar pemulihan. Model Air Terjun digunakan dalam projek ini untuk membimbing pembangunan, dan menggabungkan fasa sistematik seperti pengumpulan keperluan, reka bentuk, pelaksanaan, ujian, dan penyelenggaraan. Untuk memahami isu kritikal dengan saluran tidak rasmi sedia ada seperti proses pelaporan yang berpecah dan kekurangan kemas kini tepat pada masanya, maklum balas pengguna dikumpulkan melalui tinjauan di Google Form. FindIt direka untuk mengintegrasikan set ciri yang kukuh disesuaikan untuk pelajar universiti, seperti padanan imej berasaskan AI, pemberitahuan masa nyata, dan penjejakan status barang yang dilaporkan dalam aplikasi mudah alih. Antara muka web yang berfokuskan pentadbir juga direka untuk memastikan pengurusan tuntutan dan akaun pengguna yang cekap. Keberkesanan sistem ini dinilai melalui ujian fungsian dan kebolehgunaan untuk menekankan peningkatan ketara dalam kecekapan pemulihan barang, kepuasan pengguna, dan kebolehpercayaan sistem. Projek ini menyumbang kepada aplikasi AI dalam amalan, terutamanya dalam meningkatkan pengalaman kampus. TABLE OF CONTENTS {#table-of-contents .unnumbered} DECLARATION [i](#declaration) ACKNOWLEDGEMENT [ii](#acknowledgement) ABSTRACT [iii](#abstract) ABSTRAK [iv](#abstrak) TABLE OF CONTENTS [v](#table-of-contents) LIST OF TABLES [vii](#list-of-tables) LIST OF FIGURES [viii](#list-of-figures) Chapter 1: Introduction [1](#chapter-1-introduction) 1.1 Introduction [1](#introduction) 1.2 Problem Statement [2](#problem-statement) 1.3 Project Scope [2](#project-scope) 1.4 Aims and Objectives [4](#aims-and-objectives) 1.5 Brief Methodology [4](#brief-methodology) 1.6 Significance of project [7](#significance-of-project) 1.7 Project Schedule [8](#project-schedule) 1.8 Expected outcome/Project outcome [8](#expected-outcomeproject-outcome) 1.9 Project Outline [8](#project-outline) Chapter 2: Literature Review [10](#literature-review) 2.1 Introduction [10](#introduction-1) 2.2 Review on Similar Existing Systems [10](#review-on-similar-existing-systems) 2.2.1 Overview [10](#overview) 2.2.2 Lost and Found [10](#lost-and-found) 2.2.3 Lost'NFound [17](#lostnfound) 2.2.4 Lost and Found Network [23](#lost-and-found-network) 2.3 Comparison of the Features in Existing Systems and Proposed System [30](#comparison-of-the-features-in-existing-systems-and-proposed-system) 2.4 Review on Technologies and Tools used in Development [33](#review-on-technologies-and-tools-used-in-development) 2.4.1 Laravel [33](#laravel) 2.4.2 Bootstrap [33](#bootstrap) 2.4.3 Flutter [34](#flutter) 2.4.4 Laragon [34](#laragon) 2.4.5 Visual Studio Code [34](#visual-studio-code) 2.4.6 TensorFlow [35](#tensorflow) 2.4.7 FastAPI [35](#fastapi) 2.4.8 Android Studio [36](#android-studio) 2.5 Conclusion [36](#conclusion) Chapter 3: System Analysis and Design [37](#system-analysis-and-design) 3.1 Introduction [37](#introduction-2) 3.2 Requirement Analysis Phase [38](#requirement-analysis-phase) 3.2.1 Data Analysis [38](#data-analysis) 3.2.1.1 Analysis of Demographic [39](#analysis-of-demographic) 3.2.1.2 Analysis on Reasons of Developing the Proposed System [41](#analysis-on-reasons-of-developing-the-proposed-system) 3.2.1.3 Analysis on Proposed System's Functionalities and Feedback [47](#analysis-on-proposed-systems-functionalities-and-feedback) 3.2.2 System Requirement Analysis [50](#system-requirement-analysis) 3.2.2.1 Functional Requirements [51](#functional-requirements) 3.2.2.1.1 Use Case Diagram [51](#use-case-diagram) 3.2.2.1.2 Use Case Specification [51](#use-case-specification) 3.2.2.1.3 Functional Requirements [63](#functional-requirements-1) 3.3 System Design Phase [65](#system-design-phase) 3.3.1 Overall System Architectural Design [65](#overall-system-architectural-design) 3.3.2 Activity Diagram [67](#activity-diagram) 3.3.3 Class Diagram [82](#class-diagram) 3.3.4 Wireframe [87](#wireframe) 3.3.4.1 Student User Interface [87](#student-user-interface) 3.3.4.2 Admin's User Interface [115](#admins-user-interface) 3.4 Implementation Phase [123](#implementation-phase) 3.5 Verification Phase [124](#verification-phase) 3.6 Maintenance Phase [124](#maintenance-phase) 3.7 Conclusion [124](#conclusion-1) References [126](#references) Appendix A [130](#appendix-a) Appendix B [133](#appendix-b) LIST OF TABLES {#list-of-tables .unnumbered} Table 2.1: Comparison of the Features of Three Existing Systems and Proposed System. [37](#_Toc187878849) Table 3.1: Use Case Specification for Register. [58](#_Toc187878850) Table 3.2: Use Case Specification for Login. [59](#_Toc187863396) Table 3.3: Use Case Specification for Logout. [60](#_Toc187863397) Table 3.4: Use Case Specification for Managing Student Profile (Student). [61](#_Toc187878853) Table 3.5: Use Case Specification for Managing Student Profile (Admin). [61](#_Toc187878854) Table 3.6: Use Case Specification for Report Lost/ Found Item. [62](#_Toc187878855) Table 3.7: Use Case Specification for Receiving Notifications on Potential Matches between Lost and Found Items [62](#_Toc187863401) Table 3.8: Use Case Specification for Viewing Reported Items. [63](#_Toc187863402) Table 3.9: Use Case Specification for Editing Reported Items. [64](#_Toc187863403) Table 3.10: Use Case Specification for Deleting Reported Items [65](#_Toc187863404) Table 3.11: Use Case Specification for Browsing and Searching Items. [65](#_Toc187863405) Table 3.12: Use Case Specification for Submitting Claim Request. [66](#_Toc187863406) Table 3.13: Use Case Specification for Tracking Claim Status. [67](#_Toc187863407) Table 3.14: Use Case Specification for Processing Claim Request. [68](#_Toc187863408) Table 3.15: Use Case Specification for Viewing Claim Approval History. [69](#_Toc187878864) Table 3.16: Use Case Specification for Managing Item Characteristics. [69](#_Toc187863410) Table 3.17: Functional Requirements. [70](#_Toc187878866) LIST OF FIGURES {#list-of-figures .unnumbered} Figure 1.1: Phases in Waterfall Model (Hoory & Bottorff, 2024). [14](#_Toc187873530) Figure 2.1: Registration. [20](#_Toc187863418) Figure 2.2: Login. [20](#_Toc187863419) Figure 2.3: Browse item by category (lost items & found items). [21](#_Toc187873533) Figure 2.4: Filter option. [21](#_Toc187879172) Figure 2.5: Browse item. [22](#_Toc187863422) Figure 2.6: View item details. [23](#_Toc187863423) Figure 2.7: Browse item lost nearby and recently. [23](#_Toc187877952) Figure 2.8: Publish lost or found item information. [24](#_Toc187879176) Figure 2.9: View my item. [25](#_Toc187877954) Figure 2.10: Edit and delete item information. [25](#_Toc187863427) Figure 2.11: Browse lost and found item. [27](#_Toc187863428) Figure 2.12: Filter by location. [28](#_Toc187863429) Figure 2.13: Search and filter. [28](#_Toc187863430) Figure 2.14: Message finder or owner. [29](#_Toc187873544) Figure 2.15: Publish lost or found item information. [30](#_Toc187873545) Figure 2.16: View my items. [30](#_Toc187877961) Figure 2.17: Delete item. [31](#_Toc187863434) Figure 2.18: Register account. [33](#_Toc187873548) Figure 2.19: Login. [34](#_Toc187864184) Figure 2.20: Main Page. [34](#_Toc187863437) Figure 2.21: Filtered by location and date posted. [35](#_Toc187879189) Figure 2.22: Social Media Page. [36](#_Toc187877967) Figure 2.23: Create new listing. [36](#_Toc187879191) Figure 2.24: My listings. [37](#_Toc187863441) Figure 2.25: Contact advertiser. [38](#_Toc187864190) Figure 3.1: Waterfall Methodology (RemoteScout, 2023). [47](#_Toc187879194) Figure 3.2: Analysis of Respondent's Age. [48](#_Toc187873557) Figure 3.3: Analysis of Respondent's Gender. [48](#_Toc187864193) Figure 3.4: Respondent Faculty Analysis. [49](#_Toc187879197) Figure 3.5: Analysis of the prevalence of misplaced, lost, or found items among university students. [50](#_Toc187877975) Figure 3.6: Analysis on Efficiency In Recovering Lost Items. [51](#_Toc187877976) Figure 3.7: Analysis on Accessibility of the Lost and Found Information. [51](#_Toc187873562) Figure 3.8: Analysis on the Level of Frustration of Searching Item Information Manually. [52](#_Toc187863450) Figure 3.9: Analysis on Necessity of a Centralized Lost and Found Management System. [52](#_Toc187879202) Figure 3.10: Analysis on the Level of Concern regarding the Inability to Track the Status of Lost Items. [53](#_Toc187864200) Figure 3.11: Analysis on the Satisfaction with the Speed of Lost and Found Item Updates. [54](#_Toc187864201) Figure 3.12: Analysis on the Inefficient Process of Requesting Updates on the Lost Items. [54](#_Toc187879205) Figure 3.13: Analysis on the Understanding of the Current Procedures for Reporting Lost or Found Items. [55](#_Toc187863455) Figure 3.14: Analysis on Prior Usage of Lost and Found System. [56](#_Toc187873569) Figure 3.15: Analysis on Most Desirable Feature for the Proposed System. [56](#_Toc187864205) Figure 3.16: Analysis on User Preference for Automatic Matching and Notification Features. [57](#_Toc187864206) Figure 3.17: Analysis on User Concerns about a Lost and Found System. [58](#_Toc187864207) Figure 3.18: Use Case Diagram. [60](#_Toc187864208) Figure 3.19: Overall System Architecture of Proposed System (FindIt). [74](#_Toc187864209) Figure 3.20: Activity Diagram for Register. [76](#_Toc187863462) Figure 3.21: Activity Diagram for Login. [77](#_Toc187863463) Figure 3.22: Activity Diagram for Logout. [78](#_Toc187863464) Figure 3.23: Browse and Search Item. [79](#_Toc187877993) Figure 3.24: Activity Diagram for Submit Claim Request. [80](#_Toc187864214) Figure 3.25: Activity Diagram for Tracking Item Claim Status. [81](#_Toc187864215) Figure 3.26: Activity Diagram for Report Lost/ Found Item. [82](#_Toc187877996) Figure 3.27: Activity Diagram for Editing Lost/ Found Item Information. [83](#_Toc187879220) Figure 3.28: Activity Diagram for Delete Lost/ Found Item. [84](#_Toc187863470) Figure 3.29: Activity Diagram for Student Manage Profile. [85](#_Toc187877999) Figure 3.30: Activity Diagram for Admin View Claim Approval History. [86](#_Toc187864220) Figure 3.31: Activity Diagram for Admin Manage Users [87](#_Toc187864221) Figure 3.32: Activity Diagram for Admin Manage Item Categories, Colours and Location. [88](#_Toc187878002) Figure 3.33: Activity Diagram for Admin Process Claim Request from Students [89](#_Toc187873588) Figure 3.34: Entity-Relationship Diagram of Proposed System. [90](#_Toc187863476) Figure 3.35: Student Register. [95](#_Toc187864225) Figure 3.36: Student Login. [96](#_Toc187864226) Figure 3.37: Homepage/ Item Listing Page. [97](#_Toc187873592) Figure 3.38: More Option. [98](#_Toc187863480) Figure 3.39: Profile Menu [99](#_Toc187863481) Figure 3.40: Confirm to logout. [100](#_Toc187863482) Figure 3.41: Profile Details. [101](#_Toc187864231) Figure 3.42: Additional Filter [102](#_Toc187879235) Figure 3.43: Item Details of a Found Item. [103](#_Toc187873598) Figure 3.44: Claim Justification. [104](#_Toc187863486) Figure 3.45: Item Details of a Lost Item. [105](#_Toc187863487) Figure 3.46: My Item. [106](#_Toc187864236) Figure 3.47: Item Details of 'My Lost Item'. [107](#_Toc187863489) Figure 3.48: Error Message for Edit Item Details. [108](#_Toc187864238) Figure 3.49: Edit Item page. [109](#_Toc187863491) Figure 3.50: Confirm to Edit Item Details. [110](#_Toc187863492) Figure 3.51: Confirm to Delete Item. [111](#_Toc187864241) Figure 3.52: Error to Delete Item. [112](#_Toc187879245) Figure 3.53: Potential Matches (My Item). [113](#_Toc187863495) Figure 3.54: Accept Potential Matches and Claim Item. [114](#_Toc187864244) Figure 3.55: Claim Justification. [115](#_Toc187879248) Figure 3.56: My Claims (My Item). [116](#_Toc187873611) Figure 3.57: Claim Details (My Claims). [117](#_Toc187873612) Figure 3.58: My Found Item (Item Details). [118](#_Toc187873613) Figure 3.59: Report Lost/ Found Item. [119](#_Toc187863501) Figure 3.60: Error Message of Reporting Item. [120](#_Toc187863502) Figure 3.61: Notifications [121](#_Toc187863503) Figure 3.62: My Claims. [122](#_Toc187878032) Figure 3.63: Admin Login. [123](#_Toc187863505) Figure 3.64: Admin Dashboard. [123](#_Toc187873619) Figure 3.65: Admin Profile Menu. [124](#_Toc187864255) Figure 3.66: Manage Students. [124](#_Toc187864256) Figure 3.67: Confirm Delete Student's Account. [125](#_Toc187873622) Figure 3.68: Review Claim Request. [125](#_Toc187864258) Figure 3.69: Claim Requests. [126](#_Toc187873624) Figure 3.70: Confirm Approve Claim Request. [127](#_Toc187878040) Figure 3.71: Confirm Reject Claim Request. [127](#_Toc187879264) Figure 3.72: Manage Item Category. [128](#_Toc187873627) Figure 3.73: Manage Item Color. [128](#_Toc187873628) Figure 3.74: Manage Item Location. [129](#_Toc187879267) Figure 3.75: Claim Approval History Overview. [129](#_Toc187863517) Figure 3.76: Claim Approval Details. [130](#_Toc187873631) Figure A.1: Project Gantt Chart for FYP1. [137](#_Toc187876565) Figure A.2: Project Gantt Chart for FYP1. [138](#_Toc187879271) Figure A.3: Project Gantt Chart for FYP2. [139](#_Toc187879272) Figure B.1: Survey Form Description. [140](#_Toc187879273) Figure B.2: Section I for Demographics. [141](#_Toc187878051) Figure B.3: Section II for Current Experience and Challenges Faced. [142](#_Toc187879275) Figure B.4: Section II for Current Experience and Challenges Faced. [143](#_Toc187879276) Figure B.5: Section III for Desired Features and Feedback. [144](#_Toc187879277) Chapter 1: Introduction {#chapter-1-introduction .unnumbered} Introduction According to a study by Pixie Technology Inc., an average of 2.5 days per year is spent on searching for the lost items (Habersham, 2021), which wastes quite a vast amount of time, and the scenario is worse if the items are not found on time. Obviously, the study shows that the people are careless in handling personal items, and no doubt this scenario applies to the students too. Universities are huge and the students often have to travel to more than one location within the campus or between campuses during the course of one day. It can sometimes result in students misplace their personal belongings or lose their valuable items and don't know where they lost them. The current process to report and recover lost items is through word-of-mouth or social media groups only which is not efficient and reliable. These methods will cause a delay or failure of item retrieval. Hence, it is essential to develop a system to meet the needs of the university's students. The system utilizes a mobile application for the owner to upload images and item details of found items to enable the AI-driven image matching model matching images with the list of found items uploaded. This will help automate the matching of lost and found items by comparing the item characteristics and analyzing the image, reducing the manual effort on matching the possible lost and found items. In cases the image is unavailable when reporting the lost items, system will compare and match the items based on the item characteristics like item categories, item colours and location of item lost or found. Since timely notifications plays a significant role to enhance user experience and satisfaction, the notification system will notify users when there is any update regarding the status of the reported items, for instances, when there is new potential matches or approval of claim from the admin. The notifications will help reduce user's anxiety and frustration and feel more secure regarding the recovery process. On the other side, the admin plays the role to use web-based system to manage the items and approve the claim of the items. By implementing this lost and found system, there will be an improvement and increased efficiency of the university's lost and found operations. Problem Statement In UNIMAS, currently there is no centralized platform for the students to report and recover lost items. Existing methods often relied heavily on word-of-mouth, notification in students' social media groups, or asking the staff about found items. This fragmented approach will delay the recovery process or even worse the item will not be recovered permanently (Anas et al., 2023) because it limits the visibility and accessibility for the owner outside these informal channels. Another problem is that the students can only report the lost items physically during office hours and ask for help of other students in the social media groups, leading to anxiety when they wait for updates. Consequently, the owner can't get real-time notifications when the similar item is found. Project Scope The project involves developing both a mobile application and web-based system for the users who are students and the admin respectively to simplify the item recovery process in university by integrating an image matching model. The system does not focus on verification for the students' convenience, the mobile application, built with Dart and Flutter, is designed exclusively for them to access the services anytime and anywhere. Registration and login features are required in order to use the system. The mobile app will allow the students to upload photos if available and item descriptions in order to report the lost items or found items. After this, the AI model have to take over the job to compare the uploaded photos with the existing photos in the database to display the potential matches results to both students and the admins if there is any. Item characteristics will also be considered in matching items. Next, the app will provide real-time notifications to inform the owner whenever there is new potential match or the item is approved for claiming. The student is allowed to request claiming the items not in the match result too. For the web-based system, which built with PHP and Laravel, is designed for the administrator to manage the lost and found items. For instances, the admin will have the rights to view, create, edit and delete the item characteristics of the lost and found items. These item characteristics are the predefined options that the students must select from when reporting an item to ensure consistency and accuracy of the reporting process. The system will also enable the admin to review the potential matches given by the AI model and approve the claims. Apart from that, the system will give admin the ability to manage user accounts, like view, or delete the user account. Finally, an API is developed as a central communication layer to ensure the seamless data exchange between the mobile app, web-based system and the database. The data stored in the database should include user information, images and details of item, and the matching result. The uploaded photos will be compared with the existing photos in the database, and if there is any potential matches between the lost and found items, the students and the admin will be notified. The owner can request to claim the item from the list of potential matches or list of found items manually. Aims and Objectives To design and develop the FindIt: Simplifying Campus Item Recovery with AI-Driven Lost and Found app To integrate AI-driven features for automating item matching processes within the app To evaluate the usability and functionality of the lost and found App. Brief Methodology Waterfall is chosen as the methodology to manage this project. It is a widely used project management method characterized by a sequential and linear process (Hoory & Bottorff, 2024). The methodology consists of 5 phases of management, where each phase requires a deliverable from the previous phase before proceed to the next phases (Hoory & Bottorff, 2024). The methodology emphasizes comprehensive documentation for each phase which helps in maintaining the clarity throughout the software development lifecycle (SDLC). Even though the effort of documenting the project is cumbersome, but the detailed documentation helps tracking the project's progress easier and simplifies software maintenance and further improvement and modernization on the system (Nikitin, 2024). This is one of the reason waterfall methodologies is suitable for the project. Another reason is the methodology suitable for the project with well-defined requirements (Nikitin, 2024) and requires upfront planning which aligns well with academic requirements for project report. Referring to figure 1.1, waterfall methodology consists of 5 phases, requirements, design, implementation, verification, and maintenance. {width=\"3.3979166666666667in\" height=\"2.279861111111111in\"} []{#_Toc187873530 .anchor}Figure 1.1: Phases in Waterfall Model (Hoory & Bottorff, 2024). Phase 1: Requirements This is the initial phase where all the project requirements are gathered from the students in the university. The students will be surveyed using questionnaire in Google Form to collect their insights and relevant data. The requirements collected will be analyzed and they should encompass the main functionalities of the system developed (GeeksforGeeks, 2023). This phase is important to ensure the system developed will be useful and meet the needs of the students. Phase 2: Design After the requirements is understood comprehensively, the next phase is to design the system or solutions to meet the requirements. The system design includes overall system architecture explaining the operation of system at a macro level. The interaction between users with the system will be illustrated using the use case diagrams, and then each identified use case will be further developed to provide the details descriptions in the use case specifications. Furthermore, activity diagrams will be built to define the system's workflows and processes, and class diagrams will outline the structure and relationships of the system's components. Then, the wireframes for the mobile application and mobile system will be designed. This phase serves as the guides for the implementation phase (Laoyan, 2024). Phase 3: Implementation Based on the requirements collected and solutions in the previous 2 phase, the system is developed in this implementation phase. Each system features will be developed one by one sequentially until forming a complete system. To identify and resolve the issues or bugs which arise throughout the development process, continuous testing are performed. Phase 4: Verification The system undergoes quality assurance during the verification phase (Atlassian, n.d.), where functionality and usability testing are conducted to ensure all the specified requirements and functions are met correctly. Any identified issues and bugs are documented and addressed in this phase. Phase 5: Maintenance The final phase is system maintenance. Continuous support for the software, such as fixing bugs, implementing updates or improvements based on the user feedback is critical to meet the evolving needs over time. This phase emphasizes maintaining system stability and enhancing functionality to keep the system reliable and effective. Significance of project The project plays a crucial role to address the current challenges faced by the students to recover the lost items conveniently and efficiently. Currently there is no standard procedure or guideline for the students to report the lost and found items, so the project helps in ensuring organized and not scattered lost and found information by providing a centralized platform to locate all of them in one platform. The students will no longer need to search for information across different sources like social media, messaging application, or word-of-mouth. Instead, the system will allow students to report and search items in one place, avoiding any key information of the lost item is overlooked. Apart from that, the project important in reducing the time and effort of the users to find a list of potential matches from a large amount of found items. With AI-driven image matching, visual characteristics of the item in the image will be compared automatically, bypassing the need for users to find the lost items by manually sifting through every found items, but instead focusing on the items which has been identified as potentially matched. This can greatly speed up the process of recovering the item. The redundancy of checking if the same item matched with the new report can be minimized since the system will take the roles actively monitoring the new reports, generating the potential matches automatically. This approach will keep the users away from committing extra effort since the system will \"do the searching and matching\". Project Schedule Gantt chart for the project schedule is attached in APPENDIX A. Expected outcome/Project outcome A fully functional mobile application and web-based system which provide a formal channel to students in the entire campus to report and recover lost belongings. Improved lost items recovering efficiency to reduce delays or failed collections. The expected outcome is a fully functional AI-driven lost and found app that simplifies item recovery on campus, enhancing efficiency and user satisfaction. Project Outline This Final Year Project Report consists of 6 chapters, which are introduction, literature review, requirement analysis and design, implementation, testing and finally conclusion and future work. Chapter 1 outlines the brief introduction and overview of the project. The chapter includes the project background, problem statement, project scope, objectives, methodology, significance of project, project schedule, expected outcome and the project outline. Chapter 2 focuses on literature review of the project. The features of the similar system existing in the market will be analyzed and compared with the proposed system. Technologies and tools used in the project will be covered in this chapter. Chapter 3 involves requirements and analysis of the project. The requirement gathered is analyzed in this chapter. All the necessary system design like system architecture design, use case diagram, use case specifications, activity diagram, class diagram and user interface is developed in this chapter. Chapter 4 depicts the implementation of the system. The system design is transformed to a functional system through the system development and implementation process. Chapter 5 covered testing, which focuses on the test plan, developing the test cases, and carried out functional and usability testing. Chapter 6 describes about the conclusion and future works. This chapter concludes the project and provides recommendations for possible future work to make improvements. Literature Review Introduction In this chapter, a detailed analysis on the existing systems which are similar to the system proposed in this project will be carried out to identify their strengths and limitations. Through reviewing these systems, valuable insights on how the system should be developed and designed will be gained. The conclusion drawn from the analysis will help in forming a system addressing the shortcomings identified in existing solutions. Review on Similar Existing Systems {#review-on-similar-existing-systems} Overview There will be 3 similar existing systems analyzed in this section, they are \"Lost and Found\", \"Lost'NFound\" and \"Lost and Found Network\". Their features will be discussed in the following section. Lost and Found Lost and Found is a mobile application offered by Techju, designed as a community driven project to help users in recovering their misplaced or lost belongings via community support. ( Lost and Found - Apps on Google Play , 2024). The application aims to improve trouble-free lost and found process by streamlining the process of recovering the lost items. In addition to retrieve the lost items, the platform promotes the communal awareness and a sense of responsibility for the people using it ( Lost and Found - Apps on Google Play , 2024). {width=\"1.4722222222222223in\" height=\"2.953472222222222in\"} []{#_Toc187863418 .anchor}Figure 2.1: Registration. Before the users can start using all the functions provided by the platform, registration is necessary. A non-registered user is not allowed to report and post the lost and found information in the system. Referring Figure 2.1, the name, email address, phone number, and password need to be provided to complete the registration process. {width=\"1.4694444444444446in\" height=\"2.938888888888889in\"} []{#_Toc187863419 .anchor}Figure 2.2: Login. As shown in Figure 2.2, the registered user can then login before proceed to use the system. User can reset the password in case they forget the password by clicking on the \"Forget Password\" option. The user can prefer to sign in with google to save time by reducing the hassle of creating and managing new account. {width=\"1.382638888888889in\" height=\"2.7041666666666666in\"} []{#_Toc187873533 .anchor}Figure 2.3: Browse item by category (lost items & found items). From Figure 2.3, all the items reported in the system are listed under 2 main categories which are \"lost items\" and \"found items\". This can help users to locate the desired lost and found information quickly and effectively. Users can navigate to the \"lost items\" category to put effort helping others find their belongings, or navigate to the \"found items\" category to check if the lost item was found by others. {width=\"1.3555555555555556in\" height=\"2.70625in\"} []{#_Toc187879172 .anchor}Figure 2.4: Filter option. Filter can be applied to a search to refine the search results, returning the possible match of items efficiently. For example, users are allowed to filter the search results by specify the country, and category as depicted in Figure 2.4. \"Country\" filter will ensure the lost or found items searched and returned are within a specific country while 'category' filter specifying the type of items searched to exclude irrelevant results. {width=\"1.4388888888888889in\" height=\"2.9180555555555556in\"} []{#_Toc187863422 .anchor}Figure 2.5: Browse item. Figure 2.5 shows that the user can browse the brief item's metadata such as the item image, name, item description, country, and the username. The user can prefer to report the lost or found item here by clicking on the \"+\" button so that they can quickly post the item information here if the desired lost or found item is not identified. {width=\"1.4861111111111112in\" height=\"3.223611111111111in\"} []{#_Toc187863423 .anchor}Figure 2.6: View item details. Figure 2.6 illustrates all the item details displayed to the users, such as location where the item is found, contact information of the person who upload the item, item category and offered reward. This information is useful to match the item with the rightful owners. {width=\"1.48125in\" height=\"2.9569444444444444in\"} []{#_Toc187877952 .anchor}Figure 2.7: Browse item lost nearby and recently. Figure 2.7 depicts that the system offers features for the users to browse the latest lost and found item. It can save the time and effort by reducing the possibility of searching through the outdated entries or records. Apart from that, the system enable the users to browse the lost and found items in their vicinity, providing convenience to the users. {width=\"1.4708333333333334in\" height=\"2.96875in\"} []{#_Toc187879176 .anchor}Figure 2.8: Publish lost or found item information. From Figure 2.8, users are required to provide the item image, item name, phone number, reward to the person who find it if any, item category, date, location and item description when publishing a lost or found item on the platform. The comprehensive information provided will maximize the chance of reuniting the items with the owner. The platform allows users to pin a location in the map to show a more accurate reference point for others. {width=\"1.3423611111111111in\" height=\"2.688888888888889in\"} []{#_Toc187877954 .anchor}Figure 2.9: View my item. After publishing the lost or found item information in the platform, the user can navigate to review the all the item reported here as shown in Figure 2.9. {width=\"1.3347222222222221in\" height=\"2.6930555555555555in\"} []{#_Toc187863427 .anchor}Figure 2.10: Edit and delete item information. Figure 2.10 shows that the user can edit the post by clicking on the \"Edit\" button, and \"delete\" to remove the post after the item is found and returned. Strengths of Lost and Found Sign in using Google The \"Sign in with Google\" functionality help simplify the process of registration, as the user no longer need to provide their name, email address, phone number, password and more personal details. The feature also simplifies the login process by eliminating the needs to remember separate credentials for the mobile application, allowing users to login with the same credentials as their Google account. Apart from that, this feature applies Google Authenticate to adds an additional layer of security when the user login. Weaknesses of Lost and Found No email verification upon account registration (excluding \"sign in with google\" is inherently secure) After the user had registered an account, no authentication code is sent to their email for verification purpose which may lead to duplicate accounts with invalid email addresses, affecting the platform's reliability. A valid email is important for the user to receive notifications like item match alerts and password reset. This could compromise the integrity of the lost and found process, preventing the users from registering an account since the malicious users had register fake accounts using the legitimate email addresses. Lost'NFound The Lost'NFound mobile application connect together the item owner who lost the item and the finder. GPS technology is utilized in this mobile application to assist the users to find the lost and found item more conveniently by showing all the items reported lost or found nearby to the user location ( Lost and Found - Apps on Google Play , 2023). The app emphasizes on the privacy of the users since the user don't have to register to use the mobile apps ( Lost and Found - Apps on Google Play , 2023). Hence, communication take place without personal information revealed to others. {width=\"1.6194444444444445in\" height=\"3.3631944444444444in\"} []{#_Toc187863428 .anchor}Figure 2.11: Browse lost and found item. Figure 2.11 showcases homepage of the application where all the item reported lost or found near the user location are displayed. The items are divided into 2 main sections, which are \"found items\" and \"lost items\". If the user would like to view the lost and found item not in their current location, they can choose a different location rather than their current location by clicking on the address shown in the top part of Figure 2.11. {width=\"1.5777777777777777in\" height=\"3.2840277777777778in\"} []{#_Toc187863429 .anchor}Figure 2.12: Filter by location. Figure 2.12 clearly illustrates that the user can switch their current location by pinpointing the desired location in the map. The red pin in the map can be dragged and moved to any location. The item lost and found near the latest location pinned in the map will be returned in the search result after the \"add location\" is clicked. {width=\"1.6736111111111112in\" height=\"3.495833333333333in\"} []{#_Toc187863430 .anchor}Figure 2.13: Search and filter. As depicted in Figure 2.13, Lost'NFound mobile application provides a feature to search specific items with an accurate location as the filter. Normally other lost and found system only allow to apply filter of broader categories such as country and city, but not accurate up to an exact location. This functionality is achieved by allowing the users to pin the location on the map. {width=\"1.5909722222222222in\" height=\"3.285416666666667in\"} []{#_Toc187873544 .anchor}Figure 2.14: Message finder or owner. As shown in Figure 2.14, the \"Message\" button is available for the users to click on to start communicating with the finder or owner of the items. The communication happens in the app, and no personal information such as the phone number and email addresses will be shared or leaked to the other party in this process. {width=\"1.4479166666666667in\" height=\"2.9902777777777776in\"} []{#_Toc187873545 .anchor}Figure 2.15: Publish lost or found item information. Similar to other lost and found system, the platform allow user to post their lost and found items as shown in Figure 2.15. {width=\"1.4013888888888888in\" height=\"2.9291666666666667in\"} []{#_Toc187877961 .anchor}Figure 2.16: View my items. Figure 2.16 depicts that the user can review all the items they have reported in the past. All the published item information is listed under 2 main sections which are \"Found Items\" and \"Lost Items\". {width=\"1.4180555555555556in\" height=\"2.922222222222222in\"} []{#_Toc187863434 .anchor}Figure 2.17: Delete item. Figure 2.17 showcases that the user can delete the item they have posted in the platform after a successful retrieval process. There is no option to edit the item information and the only choice is to delete the post and create a new one. Strengths of Lost'NFound Pin location to filter search results The geolocation feature enables the users to pin a specific location on the map as a filter for the search results. It has improved the system usability and effectiveness because this is an intuitive way for users to visualize and select locations with greater precision. Normally other systems only offer filter option of country, state, or city, not accurate up to specific area. An accurate location filter ensures a high accuracy search, which aids in narrowing down the search results to those closest to the pinned location and hence saves time to identify desired posts of lost or found item information. No exposure of private contact information There are no user's contact details like email addresses and phone number displayed in the lost or found item information to keep their private information secure. To achieve this, in-app chat feature is provided to ensure secure communication between the users. Thus, any potential risks of harassment and spam will be avoided, encouraging the users to interact with each other without any concern of exposing any sensitive data. Weaknesses of Lost'NFound Too few filter option available for searching items The system only offers one filtering options for searching, which can hinder the user from getting the best out of the search. For instance, there is no option to filter by category, meaning users cannot opt to see results by item type. This limitation contributes to a longer search time to filter through unrelated results, negatively affecting the overall efficiency and user experience with the system. Item information cannot be edited, only option to delete is available The system does not allow users to update or modify the information of an item once it has been posted. The only option available is to delete the post and create a new post entirely if there is any errors or needs to update the item details ensuring most up-to-date information. This shortcoming reduces the system usability and user satisfaction. Lost and Found Network Lost and Found Network is a global search engine for lost and found information developed by Greenitco Technologies Pvt Ltd (About Us, 2024). The system can be accessed in both form of website and mobile application, catering to a broader audience. This dual-platform availability improves the accessibility significantly, allowing seamless interaction with the system and providing convenience for users with different preferences (Jones, 2024). It has even provided a Facebook page where the lost and found information is shared to increase the exposure and reach broader audiences and those who are hard-to-reach (Petkovic et al., 2021). {width=\"5.604861111111111in\" height=\"3.123611111111111in\"} []{#_Toc187873548 .anchor}Figure 2.18: Register account. Figure 2.18 depicts that pre-registration is necessary before the user can access to functions like listing the lost and found information in the system. {width=\"5.611805555555556in\" height=\"3.321527777777778in\"} []{#_Toc187864184 .anchor}Figure 2.19: Login. The users must provide valid credentials such as email address, password, alongside passing the reCAPTCHA verification to login successfully as shown in Figure 2.19. {width=\"5.691666666666666in\" height=\"3.4055555555555554in\"} []{#_Toc187863437 .anchor}Figure 2.20: Main Page. Figure 2.20 illustrates the main page of the website where the users can browse all the item listings here. The user can search for specific lost or found item by inputting the item's name or descriptions in the search bar alongside with filter option which includes the item categories and location. The returned search results are based on the search keywords and the filters applied. If the user wants to display the item based on the filter alone, the user can click on the category name to view all the items related to the category. Each listing includes a photo, description, location, and date of the incident. {width=\"5.718055555555556in\" height=\"3.3819444444444446in\"} []{#_Toc187879189 .anchor}Figure 2.21: Filtered by location and date posted. Additionally, the system allows the users to solely filter the result based on the location or date posted as shown in Figure 2.21. {width=\"5.768055555555556in\" height=\"2.676388888888889in\"} []{#_Toc187877967 .anchor}Figure 2.22: Social Media Page. As shown in Figure 2.22, the lost and found item information will be shared in the social media, Facebook page here to reach broader audience increasing the possibility of recovering the lost items. {width=\"5.148611111111111in\" height=\"3.1125in\"} []{#_Toc187879191 .anchor}Figure 2.23: Create new listing. As illustrated in Figure 2.23, Every registered user is allowed to create a new listing for lost or found items by providing the relevant item details such as category, item type (lost or found), name, description, any offered rewards, city, contact information (email and phone number) of reporter, and photo if available. {width=\"5.045833333333333in\" height=\"3.002083333333333in\"} []{#_Toc187863441 .anchor}Figure 2.24: My listings. As shown in Figure 2.24, the user can view their own listing of items in the system. After the items is reported to be lost or found in the system, the items will not be listed right away and publicly visible to other users. The listings must first receive approval from the system admin in advance. Apart from that, the user are free to edit or delete the item details before or after the item is listed successfully in the system anytime to ensure flexibility in case of errors. {width=\"5.135416666666667in\" height=\"3.0791666666666666in\"} []{#_Toc187864190 .anchor}Figure 2.25: Contact advertiser. The system allows the user to contact the advertiser (owner or the person who found an item) using in-app chat function to claim or return items as shown in Figure 2.25. To initiate the chat, the user simply needs to enter the phone number and messages. Alternatively, the user can call the advertiser directly if the situation is emergency since the phone number is provided in the item listing details. Strengths of Lost & Found Network Provide official social media page for higher exposure of information The system owns a social media page where the lost and found information will be posted on it to help increase the visibility, ensure reaching the audience not actively use the application itself. The social media posts can be shared easily and circulated among a wider network, positively increasing the chance of recovering the lost items. More filter option (i.e. by the number of days since an item was posted) Lost & Found Network adds usability by allowing people to filter the items based on the days since the items were posted. This helps users find what they need faster without having to wade through potential item information in a large database. Weaknesses of Lost & Found Network Wait for approval before the item details publicly visible The system requests the users to go through an approval process to make the item details visible. Although this step may help ensure the integrity and authenticity of the item information shared on the system, it can lead to delays, especially in contexts that are urgent where people need immediate visibility of their lost or found items. The waiting period might affect the overall user experience and satisfaction for the students who are in a urgent situation. Comparison of the Features in Existing Systems and Proposed System []{#_Toc187878849 .anchor}Table 2.1: Comparison of the Features of Three Existing Systems and Proposed System. Systems Features Existing Systems Proposed System Lost and Found Lost\u2019NFound Lost and Found Network FindIt Platform iOS and Android iOS and Android iOS, Android and Website Android Pre-registration Yes No Yes Yes Target user Public Public Public Students Browse lost and found information Yes Yes Yes Yes Search option Yes Yes Yes Yes Filter option Yes Yes Yes Yes Report lost and found item Yes Yes Yes Yes Edit lost and found information Yes No Yes Yes Delete lost and found information Yes Yes Yes Yes Pin location Yes Yes No Yes Built-in chat system No Yes Yes No Image matching between lost and found items No No No Yes Device notifications No Yes Yes Yes Email notifications No No Yes Yes Browse recovered item information No No No Yes Approval for listing item No No Yes No Track the status of reported lost and found item No No No Yes Submit claim request No No No Yes Based on Table 2.1, 'Lost and Found Network' has the most features among the existing systems while 'Lost and Found' and 'Lost'NFound; have the least features among the existing system. All the existing systems have provided all the basic features required in a lost and found system like manage, search, filter and browse the lost and found information. 'Lost and Found network' has some special feature that other 2 existing systems does not offer. One of them is receiving approval to list the item and make it publicly visible to all the users. Another feature is that the ability for the user to receive email notifications from the system. The proposed system, 'FindIt' supports Android platform only and is specifically designed for university students, whereas the existing systems focus on public and supports platforms, including Android, iOS, and websites. By focusing on university students as the target audience, the system will be more tailored to their needs. The system provides most of the main features offered by the existing systems and offers a few improvements over the existing system as shown in the Table 2.1. Firstly, 'FindIt' introduces a special feature not found in the existing system, etc. image matching between the lost and found items. The feature will help improve the efficiency in item recovery thanks to the automation in matching the items using images. Moreover, 'FindIt' allows the students to track the status of the reported items and request for a claim, ensuring the lost and found process is transparent and structured. Unlike some of the existing systems, 'FindIt' does not provided features to send message to other users in the system. This is because no necessity for communication between the students since all the found item will be returned to the admin temporarily before the true owner is identified. Additionally, 'FindIt' does not request the students to receive approval for item listings because this will consume more time for the recovery process, affecting the efficiency of the systems badly. Overall, the proposed system is a competitive and innovative solution to be implemented in university campus for the students. Review on Technologies and Tools used in Development Laravel Laravel is an open-source and powerful PHP framework designed to streamline the process of developing the web applications. The framework follows the model-view-controller (MVC) architecture which separate the development process into three interconnected components: model, view and controller (Fastfwd, 2022). This approach will help to produce organized and maintainable code. With its eloquent Object-Relational Mapping system, the developer can interact with the database using PHP syntax, avoid using the complex SQL queries (Fastfwd, 2022). It can save a lot of time to access and query the database. Laravel also includes the feature which is the blade templating engine which allow the developers to create lightweight template for the web pages easily (Fastfwd, 2022). It is well-suited to develop the website of the proposed system: FindIt since Laravel provide an extensive list of powerful features. Bootstrap Bootstrap is a CSS framework aims to simplify web design by providing a collection of easy-to-use tools. Responsive grid system, pre-designed components and customized utilities are provided to help developers quickly creating web design that can adapt to device with different size seamlessly. There are also some JavaScript plugins provided in the framework (GeeksforGeeks, 2024b). With these amazing features provided, quick development of professional-looking web design is possible since the developers no longer need to design the webpage from scratch and instead use the pre-designed components which ensure consistency design across different webpage (GeeksforGeeks, 2024b). Therefore, more effort can be assigned to content creation and logic implementation. Flutter Flutter is a framework built on Dart, designed for building platform-independent mobile apps. It supports cross-platform development where the developers can design single code producing apps that can operate on different platforms, like Android, iOS, desktop and web. Flutter includes integrated tools for testing and debugging, allowing developers to quickly identify and address any problems during development process. Besides, key features of Flutter encompass the accessibility to native features, and customized widgets and tools which are all important factors of building a visually appealing and highly functional mobile apps (Onipe, 2023). Laragon Laragon is a simple, modern and flexible Windows development server which integrates a few programming languages, database management tools, DNS services, web servers and terminal emulators to ease the software development process for PHP and Node JS applications. For example, PHP, Apache, Nginx, MySQL, Node JS are provided. Laragon provides a user-friendly interface where the developers can control all the software it manages such as turn on or off the server processes. Manual efforts are greatly reduced since Laragon is responsible to configure the necessary files and updates system paths automatically once switching between different versions of the extensions happened (Karunaratne, 2022). This tool is definitely a good option to run and debug the system in the development server. Visual Studio Code Visual Studio Code is a code editor that offers a vast array of features in the form of plugins which the developers can install to their development environment according to their demands and requirements. Its cross-platform compatibility supports installation on different platforms, including macOS, Windows, and Linux. Visual Studio Code ships with Node.js, Typescript, Javascript in default, while its extension ecosystem supports for different programming languages such as Python, C++, Java, C#, PHP and etc ( Visual Studio Vs Visual Studio Code - What's Best in 2024? , 2024). It is suitable for this project due to its ease of use, extensibility, and flexibility. TensorFlow TensorFlow is an open-source framework introduced by Google to build different machine learning and deep learning models. It is primarily used to perform computations on big numerical datasets (Banoula, 2024). These computations refer to two main processes in machine learning and deep learning: training and inference. TensorFlow was intended to run on many CPUs or GPUs, and increasingly many mobile operating systems ( Introduction to TensorFlow and Keras --- Deep Learning With TensorFlow , n.d.). TensorFlow can also be used to access and integrate the pre-trained model into the proposed system ( Transfer Learning and Fine-tuning , 2024). FastAPI FastAPI is a high-performance web framework enabling developers to build APIs with Python. As one of the fastest web frameworks available, it can process multiple requests at the same time. Its Python 3.7++ capabilities allow the creation of reliable APIs with little code. It has offered powerful features like generating documentation automatically for APIs using Swagger UI and ReDoc based on the type hints and docstrings in the code, which reduces development time and increases API comprehension. Additionally, it also helps in data validation as it automatically validates request and input data, ensuring consistency and reducing errors (Simplilearn, 2024). For these reasons, it is chosen to build the API for the AI model, enabling seamless communication between the system and AI model. Android Studio Android Studio is the official Integrated Development Environment (IDE) for developing android mobile apps ( Download and Install Android Studio | Android Developers , 2024). The emulator that comes with Android Studio enables developers to test their applications in a simulated environment that mirrors real Android devices. It is available in many screen sizes, resolutions and Android versions for testing purposes ( Run Apps on the Android Emulator , 2024). Besides its powerful emulator, Android Studio also provides a unified environment where developers can build, test and debug applications for all Android devices ( Meet Android Studio , n.d.). This combination caters to every aspect of the development process which minimizes the use of multiple tools. Conclusion In summary, a comprehensive review of three existing systems along with the proposed system are carried out in this chapter. The features, strengths and limitations of the existing systems are being discussed and analyzed. Then, the features of the existing systems and proposed system are compared. Additionally, the software tools used to develop the proposed lost and found system, including Laravel, Bootstrap, Flutter, Laragon, Visual Studio Code, TensorFlow, FastAPI, Android Studio, are reviewed. System Analysis and Design Introduction This chapter discusses in detail the phases involved in the Waterfall Model software development methodology. The selection of methodology is crucial to define the systematic procedures to deliver a functional system within the specified timeframe. Figure 3.1 presents the phases of the Waterfall Model. The focus of this chapter will be placed on the first two phases, namely requirement analysis and system design, while the overview of the subsequent phases like implementation, verification and maintenance will be provided in this chapter. The requirement analysis phase has been divided into two sub-works, namely: Data Analysis and System Requirements Analysis. Data Analysis would involve questionnaire distributions to gather information whereby the data extracted will be subjected to detailed analysis for meaningful findings and identification of system requirements. In the system requirement analysis phase of software development, use case diagram is used to visualize the functional requirements of a system by illustrating the interactions between users (actors) and the system, ensuring all functional requirements are accounted for. For the system design phase, the focus is to develop comprehensive diagrams and documentation of the proposed system, such as a system architecture diagram, activity diagram, class diagram and wireframe. {width=\"3.3041666666666667in\" height=\"2.38125in\"} []{#_Toc187879194 .anchor}Figure 3.1: Waterfall Methodology (RemoteScout, 2023). Requirement Analysis Phase Data analysis and system requirement analysis will be conducted via questionnaire and use case diagram respectively in this phase to ensure that all the requirements are captured accurately. Data Analysis Questionnaire is distributed to the respondents through Google Form to collect relevant data for analysis. The questionnaire is attached in APPENDIX B for reference. The target audience of this questionnaire is any undergraduate students in UNIMAS. The questionnaire was divided into three sections: Section I Demographics, Section II Current Experience and Challenges Faced, and Section III Desired Features and Feedback. Section I aims to collect the demographic details of the respondent, Section II aims to understand reasons of developing the proposed system while Section III aims to identify the necessary requirements to be included in the system and collect feedback from the respondents regarding the proposed system. A total of 33 respondents had answered the questionnaire and the data collected are presented in chart form for better analysis. Analysis of Demographic {width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187873557 .anchor}Figure 3.2: Analysis of Respondent's Age. As shown in Figure 3.2, most of the respondents (45.5%) are between 21 to 23 years old, followed by 30.3% of respondents with age group 18-20 years old and 24.2% of the respondents are between 24 to 26 years old. There is no respondent aged 27 and above. {width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187864193 .anchor}Figure 3.3: Analysis of Respondent's Gender. There are 54.5% of male respondents and 45.5% of respondents participated in the survey as depicted in Figure 3.3. {width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187879197 .anchor}Figure 3.4: Respondent Faculty Analysis. Figure 3.4 shows that Faculty of Economics and Business dominates with 60.6% of respondents. Faculty of Social Sciences and Humanities and Faculty of Cognitive Sciences and Humanities each account for 15.2% of respondents. Meanwhile, Faculty of Engineering has 6.1%, and the Faculty of Resource Science and Technology has 3%. The remaining faculties have no respondents taken part in this survey. Analysis on Reasons of Developing the Proposed System Section II of the Questionnaire focus on analysis of the reasons developing the proposed system. The following charts are the results of the questionnaire for Section II and will be analyzed in detail. From Figure B.3 in APPENDIX B, \"1\" always represents \"Strongly Disagree\" while \"5\" always represents \"Strongly Agree\" in the linear scale from 1 to 5 except for Figure 3.5. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187877975 .anchor}Figure 3.5: Analysis of the prevalence of misplaced, lost, or found items among university students. For the question shown in Figure 3.5, \"1\" represents \"Never\" while \"5\" represents \"Always\" in the linear scale from 1 to 5. The majority of respondents (33.3%) admits that they experienced frequent misplacement, loss, or finding of items in university. A considerable number of students (30.3%) has moderate frequency with the issue, while fewer students had less frequencies on the issue (15.2% for \\\"1,\\\" 12.1% for \\\"2,\\\" and 9.1% for \\\"3\\\"). Overall, this chart indicates that most of the students faced the problem of misplacing, losing, or finding items during university years. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187877976 .anchor}Figure 3.6: Analysis on Efficiency In Recovering Lost Items. Figure 3.6 shows that most of the respondents (61.5%) strongly agree that the current process of recovering lost items in university is not efficient, followed by 45.5% agree with the statement. Only 3% of the respondent stays in neutral position, while nobody disagreed with the statement. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187873562 .anchor}Figure 3.7: Analysis on Accessibility of the Lost and Found Information. Figure 3.7 shows that most of the respondents (57.6%) agree that the lost and found information within the university is not easily accessible, while 30.3% strongly agree to the statement. Only a small minority remained in a neutral position and disagree (9.1% and 3% respectively). {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187863450 .anchor}Figure 3.8: Analysis on the Level of Frustration of Searching Item Information Manually. Figure 3.8 shows that most of the respondents (75.8%) strongly agree that it is really frustrated to manually search through lost and found information, while 18.2% agree to the statement. Only a small minority remained in a neutral position (6.1%). {width=\"5.479166666666667in\" height=\"2.6055555555555556in\"} []{#_Toc187879202 .anchor}Figure 3.9: Analysis on Necessity of a Centralized Lost and Found Management System. Figure 3.9 illustrates that most of the respondents (72.7%) strongly agree that it is really frustrated to manually search through lost and found information, while 18.2% agree to the statement. Only a small minority remained in a neutral position (6.1%). {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187864200 .anchor}Figure 3.10: Analysis on the Level of Concern regarding the Inability to Track the Status of Lost Items. The majority of respondents (48.5%) strongly agree that they may feel worried if unable to track the status of the lost items as shown in Figure 3.10. Same amounts of respondents (45.8%) agree to the statement, while 3% of the respondents disagree to the statement. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187864201 .anchor}Figure 3.11: Analysis on the Satisfaction with the Speed of Lost and Found Item Updates. Figure 3.11 depicts that most of the respondents (57.6%) strongly agree that the updates on lost and found item is not timely, followed by 36.4% of the respondents agree to the statement. Only 3% of the respondents remains neutral for this statement and an equal percentages of respondents strongly disagree with the statement. {width=\"5.768055555555556in\" height=\"2.932638888888889in\"} []{#_Toc187879205 .anchor}Figure 3.12: Analysis on the Inefficient Process of Requesting Updates on the Lost Items. Figure 3.12 illustrates that most of the respondents (57.6%) strongly agree that the current method of requesting updates is inefficient, while 42.4% agree to the statement. None of the respondents disagree to the statement. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187863455 .anchor}Figure 3.13: Analysis on the Understanding of the Current Procedures for Reporting Lost or Found Items. Most of the respondents (51.5%) strongly agree that they are unclear about the current procedures for reporting lost or found items, while 42.4% agree to the statement as shown in Figure 3.13. Only a small minority disagree to the statement (6.1%). Analysis on Proposed System's Functionalities and Feedback {width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187873569 .anchor}Figure 3.14: Analysis on Prior Usage of Lost and Found System. Referred to Figure 3.14, of the 33 responses, majority of the respondents (78.8%) have no prior experience in using a lost and found system. Only 21.2% of the respondents have previously used a lost and found system. {width=\"5.768055555555556in\" height=\"2.932638888888889in\"} []{#_Toc187864205 .anchor}Figure 3.15: Analysis on Most Desirable Feature for the Proposed System. The chart represents the results asking respondents choosing the 5 features they think will be the most helpful in a lost and found system. Figure 3.15 depicts that most popular features among the respondents (over 70%) are reporting lost and found items, auto matching between lost and found items, push notifications for potential matches between lost and found items, and tracking the status of reported items. The moderately popular features chosen from the respondents (60-70%) are browsing lost or found items, and search and filter item. Lastly, the less popular features include registration and login, and viewing claim history. {width=\"5.768055555555556in\" height=\"2.6173611111111112in\"} []{#_Toc187864206 .anchor}Figure 3.16: Analysis on User Preference for Automatic Matching and Notification Features. Almost all the respondents (93.9%) would be more interested in using the proposed lost and found system if automatic matching between lost and found items and notifications features are provided in the system as shown in Figure 3.16, showing a strong preference for these features. {width=\"5.768055555555556in\" height=\"3.448611111111111in\"} []{#_Toc187864207 .anchor}Figure 3.17: Analysis on User Concerns about a Lost and Found System. As shown in Figure 3.17, there are a total of 8 responses given by the respondents for this open-ended question. 3 of the respondents show no concern over a lost and found system. One of the respondents expresses concern about the potential misuse of personal information shared within the system and whether non-students can access the system. This highlights the importance of preventing unregistered users to access the system. Furthermore, concerns are raised about the usability of the system. Hence, it is vital to ensure that the user interface is user-friendly. Another respondent asks about methods to reduce false claims. These concerns point to the need for a role takes part in approve the claim of an item. The data collected from the questionnaire during the system requirement analysis phase has given rich information that shall be helpful in developing the lost and found system. A number of key features are identified from the analysis, which should form part of the design of the system. The system should focus on the implementation of a user-friendly interface so as to ensure access and ease of use by the students. The questionnaire responses reveal a high demand for efficient reporting and tracking mechanisms regarding lost and found items. Moreover, the majority of respondents strongly preferred automated features such as the capability of item matching and push notification system in order to notify users about the potential match. Security aspects emerged as a significant concern, so it is necessary to restrict system access to registered users only. Additionally, an approval mechanism should be integrated to validate item claims, maintaining the system\\'s integrity by preventing fraudulent claims. The system has, therefore, been designed keeping in mind such basic and popular features as browsing, searching, and filtering. However, additional functionalities can be provided: user registration, login system, and tracking of previous claims. The implementation of these features derived from the questionnaire analysis will ensure the system effectively addresses user requirements, and enhance user satisfaction towards the system. System Requirement Analysis A use case diagram helps identify functional requirements since it shows the interaction of the system with its users, or actors. In this way, it is easy to understand what the system is supposed to do for each actor. Each use case corresponds to a specific functional scenario that the system needs to support. Since the mapping between the actor and use cases are displayed clearly, a clear outline of the functionalities is available and hence no critical functions will be missing in the requirement analysis phase. Functional Requirements Use Case Diagram {width=\"4.815972222222222in\" height=\"6.591666666666667in\"} []{#_Toc187864208 .anchor}Figure 3.18: Use Case Diagram. Use Case Specification []{#_Toc187878850 .anchor}Table 3.1: Use Case Specification for Register. Use Case Name: Register Use Case ID: 1 Actor(s): Student Description: Create an account by providing required details. Preconditions: Student hasn\u2019t registered on the system yet. Postconditions: Account is created. Student is logged in. Student\u2019s details are stored in the system. Basic Path: Student navigates to the registration page. Student enters name, email, and password. Student clicks \u201cSign Up\u201d button. System validates the input. System checks for duplicated email addresses. System sends a verification email to the student. Student click the URL in the email to verify their email. New user account is created. Student is logged in automatically after a successful registration. Student receives notification on a successful registration. Alternative Path: A1.1: Invalid Email and Password Format Error message displayed. Student enters correct email and password. Resubmit the registration form. A1.2: Duplicate Email Error message displayed. Student use different email for registration. []{#_Toc187863396 .anchor}Table 3.2: Use Case Specification for Login. Use Case Name: Login Use Case ID: 2 Actor(s): Student, Admin Description: Login to system using valid credentials. Preconditions: User complete registering an account. Postconditions: Student is logged in. Basic Path: Student/ Admin navigates to the login page. Student/ Admin enters their email, and password. Student/ Admin clicks \u201cSign In\u201d button. System verifies the credentials against the database. Student/ Admin is redirected to the home page/ dashboard after login successful. Alternative Path: A2.1: Invalid Login Credentials Error message displayed. Student/ Admin re-enters email and password. Student/ Admin submit login request again. A2.2: Forgot Password Click \u201cForgot Password\u201d link. Student enters registered email address. Student receives password reset link in the email address. Student inputs the new password and submits the form. []{#_Toc187863397 .anchor}Table 3.3: Use Case Specification for Logout. Use Case Name: Logout Use Case ID: 3 Actor(s): Student, Admin Description: Logout to end the current session. Preconditions: User logged in Postconditions: Student logged out successfully. Student/ Admin redirected to the login page. Basic Path: Student/ Admin clicks on \u201cLogout\u201d option. Student/ Admin clicks on the \u201cConfirm\u201d button in the confirmation dialog to logout. Alternative Path: A3.1: Inactivity System logs the user out automatically due to inactivity. Student/ Admin is redirected to the login page. []{#_Toc187878853 .anchor}Table 3.4: Use Case Specification for Managing Student Profile (Student). Use Case Name: Manage Student Profile (Student) Use Case ID: 4 Actor(s): Student Description: Student can view and edit their own profile. Preconditions: Student logged in. Postconditions: Student\u2019s profile is updated if any changes applied. Basic Path: Student navigates to user profile section. System displays student\u2019s profile information. Student is allowed to modify the profile information like name and matric no. by choosing the option \u201cedit profile\u201d. Student click \u2018submit\u2019 button to submit the changes. System displays the updated profile to the student. Alternative Path: A4.1: Invalid Input 1. Input with invalid format is found by the system. 2. Error message displayed. 3. Student re-enters the information and submit the changes. []{#_Toc187878854 .anchor}Table 3.5: Use Case Specification for Managing Student Profile (Admin). Use Case Name: Manage Student Profile (Admin) Use Case ID: 5 Actor(s): Admin Description: Admin are allowed to view and delete all student\u2019s profile. Preconditions: Admin logged in Postconditions: Student\u2019s profile is deleted successfully if the admin confirms to take the action. Basic Path: Admin navigates to student section. System displays student\u2019s profile information. Student is allowed to delete the specific student\u2019s account for the system by clicking on the \u2018delete\u2019 button. System displays confirmation dialog for admin to confirm delete the account. System displays the updated students list (all registered students in the system). []{#_Toc187878855 .anchor}Table 3.6: Use Case Specification for Report Lost/ Found Item. Use Case Name: Report Lost/ Found Item Use Case ID: 6 Actor(s): Student Description: Student report the item they found or they lost Preconditions: Student logged in. Database is active and ready Postconditions: The new reported lost/ found item is stored in the database. Basic Path: Student clicks \u201c+\u201d button to initiate the reporting process. Student fills in all the required field of the report form, eg. item type, item name, item description, category, colour, and location lost/ found. Student uploads the image of the lost item if they have any. Student submits the report. System validates input in the report. The reported lost/ found item is stored in the database. Alternative Path: A6.1: Missing Required Details Error Message displayed. Student fills in all the mandatory field and submits the form. Reported lost/ found item is stored in the database. []{#_Toc187863401 .anchor}Table 3.7: Use Case Specification for Receiving Notifications on Potential Matches between Lost and Found Items Use Case Name: Receive Notifications on Potential Matches between Lost and Found Items Use Case ID: 7 Actor(s): Student Description: Notifies students on potential matches between a lost and a found item to facilitate the recovery process. Preconditions: Student has done reported a lost item in the system. Potential match is identified in the database. Student allows the system notifications. Postconditions: Student is notified of the potential matches. Basic Path: System looks for a potential match between the lost and found item based on the item characteristics like category, location, colour and the image similarity if images are provided by the students. Student receives push notifications from the system if potential matches for the item they reports has a potential match with any found item reported in the system. Students click on the push notifications. System redirects students to the notification sections in the system for complete notification details. Exception Path: E7.1: No Match Found There is no similar item in the system matching the item reported lost by the students. No notifications sent to the students. []{#_Toc187863402 .anchor}Table 3.8: Use Case Specification for Viewing Reported Items. Use Case Name: View Reported Items Use Case ID: 8 Actor(s): Student Description: Students can view the details of the items they have reported Preconditions: Student logged in. Student has done reported a lost/found item in the system. Postconditions: Item details displayed to the students. Basic Path: Student navigates to \u201cMy Item\u201d section System displays a list of all the reported items separated by item type (lost item, found item). Student select an item. Student navigates to item details subsection to view the detailed item details. Exception Path: E8.1: No reported item found System found no items reported by the student. Student receives informative message from the system explaining the situation. []{#_Toc187863403 .anchor}Table 3.9: Use Case Specification for Editing Reported Items. Use Case Name: Edit Reported Items Use Case ID: 9 Actor(s): Student Description: Allow students to update the item details Preconditions: Student logged in. The reported item not involved in a pending claim or approved claim. Postconditions: The item details are updated. Basic Path: Student navigates to \u201cMy Item\u201d section. Student selects an item from the item list to edit. Student clicks the \u201cEdit\u201d button under the \u201cItem details\u201d subsection. System displays the item details in an editable form. Student updates the item details. Student submits the form. System validates all mandatory field is filled. System display message on a successful edit. Alternative Path: A9.1: Missing Required Item Details Student submit the request to edit item details. System displays error message on some mandatory field in the form is not filled. Student fills in the missing details and submits the form. Exception Path: E9.1: Item is associated with a pending claim or approved claim. Students click the \u201cEdit\u201d button. System displays an error message indicating that any item involved in a pending or approved cannot be edited. []{#_Toc187863404 .anchor}Table 3.10: Use Case Specification for Deleting Reported Items Use Case Name: Delete Reported Items Use Case ID: 10 Actor(s): Student Description: Allow students to removes the item they have reported from the system. Preconditions: Student logged in The reported item not involved in a pending claim or approved claim. Postconditions: The reported item is removed from the system. Basic Path: Student navigates to \u201cMy Item\u201d section. Student selects an item from the item list to edit. Student clicks the \u201cDelete\u201d button under the \u201cItem details\u201d subsection. System prompts students on their intention to confirm delete the reported item. Student confirms delete the reported item. Exception Path: E10.1: Item is associated with a pending claim or approved claim. Students click the \u201cDelete\u201d button. System displays an error message indicating that any item involved in a pending or approved cannot be deleted. []{#_Toc187863405 .anchor}Table 3.11: Use Case Specification for Browsing and Searching Items. Use Case Name: Browse and Search Items Use Case ID: 11 Actor(s): Student Description: Allow students to locate the lost or found items by applying search filters and keywords. Preconditions: Student logged in Postconditions: Item list displayed to the students Students view the details of the specific item. Basic Path: Student access the homepage (browse and search page) initially. System displayed a list of items found in the order of date posted by default. Student can choose to view list of items lost by choosing the \u201cLost Item\u201d filter. Student applies the filters \u201ccategory\u201d, \u201ccolour\u201d and \u201clocation\u201d. Student search for items using keyword. System displayed all the items with matching keywords in the search results. Student clicks on the specific items to look for more details. Alternative Path: A11.1: Not Applying Filters (except the filter applied by default initially: lost item, found item) and Search Keyword Scroll to find the desired items. Choose specific items to view detailed item information. A11.2: Not Applying Filters Student inputs search keywords. Choose desired item from the search result to view item details. A3: Not Applying Search Keyword Students applies filter. Choose desired item from the filtered result to view item details. Exception Path: E11.1: No Matching Items Found System displays message highlighting no items matched the filters or search keywords. []{#_Toc187863406 .anchor}Table 3.12: Use Case Specification for Submitting Claim Request. Use Case Name: Submit Claim Request Use Case ID: 12 Actor(s): Student Description: Student can submit claim request on specific item to the admin for verification. Student can manually search for the item and submit request or accept the suggested matches from the system and submit request. Preconditions: Student logged in Postconditions: Admin receive the claim request. Basic Path: Student access homepage (browse and search page). Student search for or browse the list of items found. Student chooses specific items. Student clicks \u201cSubmit\u201d button. Student inputs the justification for claim in the text field. Confirm to submit the claim request. Alternative Path: A12.1: Accept Suggested Matches and Submit Claim Request Student reports the item they lost. System displays students the potential matches of the found items to their lost items in the \u201cMy Item\u201d section. Student chooses specific item. Student clicks \u201cClaim\u201d button to accept the suggestion and prepare to submit the claim request. Student inputs the justification for claim in the text field. Confirm to submit the claim request. []{#_Toc187863407 .anchor}Table 3.13: Use Case Specification for Tracking Claim Status. Use Case Name: Tracking Claim Status Use Case ID: 13 Actor(s): Student Description: Allow student to monitor the status of all the item they have requested to claim. Preconditions: Student logged in Student submits at least one claim. Postconditions: Student views claim status. Basic Path: Student access \u201cMy Claim\u201d section. All the submitted claims (via manual search or suggested matches) are displayed. Student views the claim status directly from the list or click to see more details of the claim. Alternative Path: A13.1: Access \u201cMy Item\u201d section to track claim status Student access \u201cMy Item\u201d section. Student select the specific item. Student navigates to \u201cMy Claims\u201d subsection. System displayed a list of claims submitted via suggested matches. Student views the status of the claim directly from the list or click to see more details of the claim. Exceptional Path: E13.1: No Claims Submitted The student has no submitted any claim. System display message highlights that no claim is found. []{#_Toc187863408 .anchor}Table 3.14: Use Case Specification for Processing Claim Request. Use Case Name: Process Claim Request Use Case ID: 14 Actor(s): Admin Description: Allow admin to approve or reject the claim requested by the students. Preconditions: Admin logged in At least one pending claim request found in the system. Postconditions: Claim request is approved or rejected. Claim status is updated. Basic Path: Admin accesses \u201cClaim Review\u201d page. All found items with pending claim request are displayed here. Admin choose an found item. System displayed all claim requests associated with the found item in the table and a section displaying the details of found item and the claimant justification. Admin clicks \u201ccompare\u201d button besides the claim requests to update the section including lost item details with the claimant\u2019s justification. Admin repeat steps 5 until finish reviewing all the claim requests. Admin approves or rejects the claim requests. Exceptional Path: E14.1: No Pending Claims Admin accesses \u201cClaim Review\u201d page. System displayed message highlighting that no claims are submitted for review. []{#_Toc187878864 .anchor}Table 3.15: Use Case Specification for Viewing Claim Approval History. Use Case Name: View Claim Approval History Use Case ID: 15 Actor(s): Admin Description: Allow admin to view the history of all the request that had been processed. Preconditions: Admin logged in At least one claim processed. Postconditions: Admin views the history of claim approval. Basic Path: Admin accesses \u201cClaim Approval History\u201d page. System displayed all the processed claims. Admin views the status directly from the list or click the \u201cview\u201d button for more details. Exceptional Flow: E15.1: No Processed Claims Admin accesses \u201cClaim Approval History\u201d page. System displays message highlighting that no claims has been processed so far. []{#_Toc187863410 .anchor}Table 3.16: Use Case Specification for Managing Item Characteristics. Use Case Name: Manage Item Characteristics Use Case ID: 16 Actor(s): Admin Description: Allow admin to create, view, edit and delete the item characteristics (e.g. item category, colour and location) so that these characteristics will appear as the options in the dropdown menu for students to choose from during reporting an item. Preconditions: Admin logged in Postconditions: Admin views the existing item\u2019s characteristics. Any action made on the item characteristics are reflected (view, edit, delete) in the system. Basic Path: Admin navigates to page of specific item characteristics (item category, colour, and location) to manage the correspond item characteristics. System displays a list of instances of the specific item characteristics found in the system. System displays all the options (create, edit, and delete) in the same page. Admin click \u201ccreate\u201d button to create new instances of the item characteristics in the system. Admin click \u201cedit\u201d to edit the current instances of the item characteristics in the system. Admin click \u201cdelete\u201d to remove the instances of the item characteristics from the system. Functional Requirements []{#_Toc187878866 .anchor}Table 3.17: Functional Requirements. Requirement Description Priority User: Admin Login to the system High Logout of the system High View Student Profile High Delete Student Account High View Pending Claim Requests High Approve/Reject Claim Requests High View Claim Approval History High View Details of both Lost and Found Items in a Claim High Create, View, Edit and Delete Item Characteristics High User: Student Register New Account High Login to the System High Logout of the System High Reset Password if Forgot the Password Medium View Profile Information Medium Edit Profile Information Medium Report Item as Lost/ Found High Upload Image for Lost/ Found Item Medium View all their Reported Items High Edit their Reported Items (for Items not associated claim request in status pending or approved) Medium Delete their Reported Items (for Items not associated claim request in status pending or approved) Medium Search for Reported Items using Keywords High Filter Items High View Search Results High Submit Claim Request for Found Items High Provide Justification during claims (if any) Medium Track the Status of Submitted Claims High Notified on New Potential Matches for their Lost Items Medium View Potential Matches for their Lost Items Medium System Design Phase The focus of the system design phase is to convert requirements into blueprints which can guide the development process. Designs like system architectural design, activity diagram and class diagrams are created in this phase. System architectural design is developed to provides a high-level structure of the system, showing the interactions between different system components. Apart from that, activity diagram is built to illustrate the system workflow clearly and help to understand more complex system logic with more ease. Finally, class diagram is designed to outline the system structure clearly by modeling the classes, attributes, methods and relationships between classes. Overall System Architectural Design {width=\"5.768055555555556in\" height=\"4.448611111111111in\"} []{#_Toc187864209 .anchor}Figure 3.19: Overall System Architecture of Proposed System (FindIt). Figure 3.19 shows the system architecture design for the proposed system, FindIt. There are 2 types of users in this system which are admin and student. Admin use website interface to access the system while student use mobile interface to access the system. A backend server is ready to accept the request from both admin and students and return corresponding data or results. Besides that, the web server also will store and protect the data. Furthermore, users interact indirectly with the shared database via backend server which plays the role to communicates with the shared database to store and retrieve data. Lastly, backend server plays the role to send request to api server to access the AI model when backend server receive request which needs the power of AI model, compare image and calculate similarity score in this case. Activity Diagram {width=\"5.425694444444445in\" height=\"8.760416666666666in\"} []{#_Toc187863462 .anchor}Figure 3.20: Activity Diagram for Register. {width=\"5.768055555555556in\" height=\"7.134722222222222in\"} []{#_Toc187863463 .anchor}Figure 3.21: Activity Diagram for Login. {width=\"5.768055555555556in\" height=\"7.2243055555555555in\"} []{#_Toc187863464 .anchor}Figure 3.22: Activity Diagram for Logout. {width=\"5.768055555555556in\" height=\"6.6618055555555555in\"} []{#_Toc187877993 .anchor}Figure 3.23: Browse and Search Item. {width=\"5.768055555555556in\" height=\"6.878472222222222in\"} []{#_Toc187864214 .anchor}Figure 3.24: Activity Diagram for Submit Claim Request. . {width=\"5.768055555555556in\" height=\"6.877083333333333in\"} []{#_Toc187864215 .anchor}Figure 3.25: Activity Diagram for Tracking Item Claim Status. {width=\"5.768055555555556in\" height=\"5.927777777777778in\"} []{#_Toc187877996 .anchor}Figure 3.26: Activity Diagram for Report Lost/ Found Item. {width=\"5.768055555555556in\" height=\"6.471527777777778in\"} []{#_Toc187879220 .anchor}Figure 3.27: Activity Diagram for Editing Lost/ Found Item Information. {width=\"5.768055555555556in\" height=\"6.885416666666667in\"} []{#_Toc187863470 .anchor}Figure 3.28: Activity Diagram for Delete Lost/ Found Item. {width=\"5.768055555555556in\" height=\"6.133333333333334in\"} []{#_Toc187877999 .anchor}Figure 3.29: Activity Diagram for Student Manage Profile. {width=\"5.768055555555556in\" height=\"6.878472222222222in\"} []{#_Toc187864220 .anchor}Figure 3.30: Activity Diagram for Admin View Claim Approval History. {width=\"5.768055555555556in\" height=\"6.145138888888889in\"} []{#_Toc187864221 .anchor}Figure 3.31: Activity Diagram for Admin Manage Users {width=\"5.768055555555556in\" height=\"6.352777777777778in\"} []{#_Toc187878002 .anchor}Figure 3.32: Activity Diagram for Admin Manage Item Categories, Colours and Location. {width=\"5.768055555555556in\" height=\"7.352777777777778in\"} []{#_Toc187873588 .anchor}Figure 3.33: Activity Diagram for Admin Process Claim Request from Students Class Diagram {width=\"5.768055555555556in\" height=\"7.834027777777778in\"} []{#_Toc187863476 .anchor}Figure 3.34: Class Diagram of Proposed System. A class diagram is used to represent the structure of the system by giving details about the entities, attributes, methods and relationship between entities. As shown in Figure 3.34, there are nine classes involved in the class diagram, including \"Students\", \"Admins\", \"Items\", \"Locations\", \"Categories\", \"Colors\", \"Claims\", \"Matches\" and \"Notifications\". The \"Student\" class contains attributes such as \"student_id\", \"matric_no\", \"name\", \"email\", \"password\", \"email_verified_at\", \"created_at\", \"updated_at\", with methods \"claims()\", \"notifications()\", and \"items()\" which retrieves the claims made, notifications received and items reported by the student. Class \"Students\" establishes a one-to-many composition relationships with the class \"Claims\", indicated by the \"1\" on Students side and \"0...*\" on the Claims side because each student can claim none or more found item, while one claim can only be initiated by one student. The composition relationship between the classes shows that a claim cannot exist without the existence of a student. Meanwhile, the \"Students\" class has a one-to-many compositions relationships to the \"Items\" class,with \"1\" on Student side, and \"0...*\" on Items side because each student can report none or many items in the system, while an item can only be reported by one student only. The composition relationship depicts that items cannot without the context of user. The \"Notifications\" class contains attributes such as \"notification_id\", \"student_id\", \"message\", and \"created_at\". The methods \"student()\" is used to retrieve the students who had received the notifications. Class \"Notifications\"maintains a many-to-one composition relationships with the \"Student\" class, indicated by the \"0...*\" on Notifications side while \"1\" on Student side. It is because each student can receive none or more notifications, while one notification only sent to one student. The composition relationship shows a notification cannot exist without the linked student. The \"Admin\" class has attributes like \"admin_id\", \"name\", \"email\", \"password\", \"created_at\", and \"updated_at\". The class includes methods \"claims()\" retrieving all the claims approved or rejected by the admin. Class \"Admin\" has a one-to-many relationships with \"Claims\" table, where the cardinality is \"0...*\" on Claims side and \"1\" on Admin side because each admin can approve/ reject none or many claims, while a claim can only be approved/ rejected by one admin only. The \"Claims\" class has attributes like \"claim_id\", \"match_id\", \"lost_item_id\", \"found_item_id\", \"student_id\", \"admin_id\", \"status\", \"user_justification\", \"admin_justification\", \"created_at\" and \"updated_at\". Methods included in the class are \"students()\", \"admin()\", \"lostItem()\", \"foundItem()\" and \"match()\". They are responsible to retrieve the students who made the claim, admin who approve or reject the claim, the lost item involved in the claim, the found item involved in the claim, and also the match which triggers the claim respectively. \"Matches\" class has a one-to-one relationship with \"Claims\" class, indicated by \"0...1*\" on both side of Matches and Claims because each match can be ignored or accepted by the user one time only, if the claim based on the matches is rejected by the admin, the student cannot submit claim based on the rejected matches again. Also each claim can only involves none or one match only because a claim not necessary submitted based on a potential match suggested by the system. The class \"Matches\" contains attributes like \"match_id\", \"lost_item_id\", \"found_item_id\", \"similarity_score\", \"status\", \"created_at\" and \"updated_at\", with methods \"lostItem()\", \"foundItem()\" and \"claim()\" \"Items\", with the roles to retrieve the lost and found item involved in a match, and also the claim triggered by the match respectively. Class \"Items\" has a one-to-many composition relationships with \"Matches\" table for a single lost item, indicated by \"1\" on Items side and \"0...*\" on Matches side. This is because each lost item can be involved in none or many potential matches generated by the system, while a match must involve one lost item. Next, \"Items\" class has a one-to-many composition relationships with \"Matches\" class for a single found item, indicated by \"1\" on Items side and \"0...*\" on Matches side because each found item can be involved in none or many potential matches generated by the system, while a match must involved one found item. The composition relationships shows that the matches will be removed from the system once the item involved in the matches is removed. The class \"Items\" contains attributes such as \"item_id\", \"name\", \"description\", \"image\", \"image_embeddings\", \"type\", \"status\", \"category_id\", \"color_id\", \"location_id\", \"student_id\", \"created_at\", \"updated_at\", and methods such as \"student()\", \"category()\", \"color()\", \"location()\", \"matches()\", and \"claims()\". These methods allow to retrieve the student who reported the item, category and color of the item, location of the item lost or found, matches which involves the item, and also claims involves the item. \"Items\" class has a one-to-many relationships with \"Claims\" class for single found item, indicated by \"0...*\" at Claims side and \"1\" at Items side because each found item can be claimed by none or many students at the same time, while a claim must mention which found item would be claimed by the student. Furthermore, \"Items\" class has a one-to-many relationships with \"Claims\" table for single lost item, indicated by \"0...*\" at Claims side and \"0...1\" at Items side . This is because every claim may not include a reported lost item because the student can directly submit claim request for a specific found item without reporting a lost item. Class \"Locations\", \"Colours\" and \"Categories\" have attributes like \"location_id\", \"colour_id\", and \"category_id\" respectively, and have common attributes \"name\", \"created_at\", \"updated_at\" with a method \"items()\" to retrieve items associated with these classes. The relationships are shown as aggregation, where locations, colors, and categories can exist independently but are used to classify multiple items. The relationship between these classes and class \"Items\" is one-to-many, indicated by \"1\" on Locations, Colours and Categories side, and \"0..*\" on \"Items\" side. This is because many items may be located at the same place, can be under the same category, and also share the same color. On the other hand, each item can only be reported lost or found at only one specific location, classified under one category, and associated with only one primary color. ** ** Wireframe Student User Interface {#student-user-interface} {width=\"3.3041666666666667in\" height=\"7.03125in\"} []{#_Toc187864225 .anchor}Figure 3.35: Student Register. Figure 3.35 shows a simple user registration screen for a mobile app. The screen includes fields likes name, email, and password, a button to submit registration request, and a link for users who already have an account to \\\"Sign in.\\\". {width=\"3.3090277777777777in\" height=\"7.041666666666667in\"} []{#_Toc187864226 .anchor}Figure 3.36: Student Login. As shown in Figure 3.36, this is a login screen allows student to enter email and password to login. The user can navigate to 'Sign Up' page by clicking the link 'Sign Up' if the user hasn't created an account yet. {width=\"3.28125in\" height=\"6.98125in\"} []{#_Toc187873592 .anchor}Figure 3.37: Homepage/ Item Listing Page. Figure 3.37 depicts a screen displaying a list of items and allow user to search for and filter the items. The screen includes a search bar, filters for \\\"Found,\\\" \\\"Lost,\\\" and \\\"Recovered\\\" items. Item name and item images will be shown in this screen to give student a quick overview of the items. A navigation bar at the bottom provides access to \\\"Home,\\\" \\\"My Item,\\\" \\\"Notifications,\\\" and \\\"More\\\" sections. {width=\"2.6770833333333335in\" height=\"5.695833333333334in\"} []{#_Toc187863480 .anchor}Figure 3.38: More Option. The screen in Figure 3.38 shows that there are options 'My Claims' and 'Account' popped up once the 'More' button is clicked. {width=\"3.40625in\" height=\"7.247222222222222in\"} []{#_Toc187863481 .anchor}Figure 3.39: Profile Menu The screen in Figure 3.39 depicts a profile menu, where user can have a quick overview of their username and email addresses, and offer option to edit the profile, logout of the system, and a link redirect user to an email application to contact admin. {width=\"3.5833333333333335in\" height=\"7.624305555555556in\"} []{#_Toc187863482 .anchor}Figure 3.40: Confirm to logout. A confirmation message will be shown to the user as shown in Figure 3.40 to confirm their intents to logout after clicking 'Logout' button to avoid any careless mistakes. {width=\"3.4791666666666665in\" height=\"7.402083333333334in\"} []{#_Toc187864231 .anchor}Figure 3.41: Profile Details. Figure 3.41 shows a screen that allow user to edit their profile details. 'Cancel' button is provided to cancel the action of editing and user profile details will be updated once they click 'Edit' button. {width=\"3.2604166666666665in\" height=\"6.936805555555556in\"} []{#_Toc187879235 .anchor}Figure 3.42: Additional Filter There are 3 filters, 'Category', 'Color', and 'Location' for the user to apply to the search result as shown in Figure 3.42. The filter will be applied to the search result right after the 'Apply Filter' button is clicked. All filter will be cleared once the 'Clear' word on the top right corner is clicked. {width=\"3.4895833333333335in\" height=\"7.424305555555556in\"} []{#_Toc187873598 .anchor}Figure 3.43: Item Details of a Found Item. Figure 3.43 illustrates a screen where the user can view more details for a found item and continue to claim it by clicking the button 'Claim item'. {width=\"3.436111111111111in\" height=\"7.3125in\"} []{#_Toc187863486 .anchor}Figure 3.44: Claim Justification. A user has to provide a justification for their claim to convince the admin to approve this claim as shown in Figure 3.44. Clicking 'Submit' button to send a claim request alongside with justification to the admin for approval. {width=\"3.5833333333333335in\" height=\"7.625in\"} []{#_Toc187863487 .anchor}Figure 3.45: Item Details of a Lost Item. Figure 3.45 shows a screen where user can see the details of a lost item. {width=\"3.4583333333333335in\" height=\"7.358333333333333in\"} []{#_Toc187864236 .anchor}Figure 3.46: My Item. Figure 3.46 shows a screen users can tap on 'Lost' or 'Found' tabs to view all the items they have reported as lost or found respectively. {width=\"3.3854166666666665in\" height=\"7.2027777777777775in\"} []{#_Toc187863489 .anchor}Figure 3.47: Item Details of 'My Lost Item'. Figure 3.47 shows a screen displayed once the tab 'Item Details' is clicked. All item details are shown here, and the user can choose to edit or delete the item. {width=\"3.34375in\" height=\"7.114583333333333in\"} []{#_Toc187864238 .anchor}Figure 3.48: Error Message for Edit Item Details. An error message will be displayed to the user explaining the reason they can't edit the item as shown in Figure 3.48. {width=\"3.3958333333333335in\" height=\"7.225in\"} []{#_Toc187863491 .anchor}Figure 3.49: Edit Item page. As shown in Figure 3.49, user is allowed to edit the item details not in the grey area. Clicking 'OK' button to edit the item details and 'Cancel' button to cancel the action and redirect back to previous screen. {width=\"3.578472222222222in\" height=\"7.614583333333333in\"} []{#_Toc187863492 .anchor}Figure 3.50: Confirm to Edit Item Details. Figure 3.50 depicts that the user will be prompted to confirm edit the item details or cancel the action to edit. {width=\"3.426388888888889in\" height=\"7.291666666666667in\"} []{#_Toc187864241 .anchor}Figure 3.51: Confirm to Delete Item. Screen in Figure 3.51 shows the user is prompted to confirm delete or cancel delete with the buttons 'Delete' and 'Cancel' provided. {width=\"3.43125in\" height=\"7.302083333333333in\"} []{#_Toc187879245 .anchor}Figure 3.52: Error to Delete Item. Figure 3.52 shows an error message during editing an item. {width=\"3.5833333333333335in\" height=\"7.624305555555556in\"} []{#_Toc187863495 .anchor}Figure 3.53: Potential Matches (My Item). By clicking the tab 'Potential Matches' as shown in Figure 3.53, the screen displaying the lists of found items which may be a potential match for lost item that user has reported, with an overview of the status of the claim associated with the match, found item name, description and similarity score. {width=\"3.4583333333333335in\" height=\"7.358333333333333in\"} []{#_Toc187864244 .anchor}Figure 3.54: Accept Potential Matches and Claim Item. Click 'Claim Item' button as shown in Figure 3.54 to submit a claim request for the item. {width=\"3.5208333333333335in\" height=\"7.490972222222222in\"} []{#_Toc187879248 .anchor}Figure 3.55: Claim Justification. User has to provide to justification for the claim of an item as shown in Figure 3.55. {width=\"3.3958333333333335in\" height=\"7.225in\"} []{#_Toc187873611 .anchor}Figure 3.56: My Claims (My Item). Clicking on tab 'My Claims' will display all the overview of past and ongoing claim for the potential matches of item suggested to the user as shown in Figure 3.56. {width=\"3.4902777777777776in\" height=\"7.427083333333333in\"} []{#_Toc187873612 .anchor}Figure 3.57: Claim Details (My Claims). Figure 3.57 shows all the details related to a claim after the user click on specific claim. {width=\"3.602777777777778in\" height=\"7.666666666666667in\"} []{#_Toc187873613 .anchor}Figure 3.58: My Found Item (Item Details). For the reported found item, there is only one tab which is 'Item Details' available where shows the item details and status of the item, active or resolved as shown in Figure 3.58. {width=\"3.6041666666666665in\" height=\"7.669444444444444in\"} []{#_Toc187863501 .anchor}Figure 3.59: Report Lost/ Found Item. Figure 3.59 shows a form for users to report their lost items or found items. {width=\"3.359722222222222in\" height=\"7.149305555555555in\"} []{#_Toc187863502 .anchor}Figure 3.60: Error Message of Reporting Item. Figure 3.60 shows an error message displayed when there is empty field. {width=\"3.48125in\" height=\"7.407638888888889in\"} []{#_Toc187863503 .anchor}Figure 3.61: Notifications Notifications are all listed at the notification page as shown in Figure 3.61. . {width=\"3.7006944444444443in\" height=\"7.875in\"} []{#_Toc187878032 .anchor}Figure 3.62: My Claims. Figure 3.62 shows the screen where all claims are listed, not limited to specific item. Admin's User Interface {#admins-user-interface} {width=\"5.072916666666667in\" height=\"3.3680555555555554in\"} []{#_Toc187863505 .anchor}Figure 3.63: Admin Login. Figure 3.63 illustrates a login webpage for admin. Admin need to provide email address and password to login. {width=\"4.8875in\" height=\"3.245138888888889in\"} []{#_Toc187873619 .anchor}Figure 3.64: Admin Dashboard. Figure 3.64 depicts a dashboard for admin to have a quick overview on no. of registered students, no. of pending claims, no. of claimed item, and recovery rate. {width=\"5.768055555555556in\" height=\"3.829861111111111in\"} []{#_Toc187864255 .anchor}Figure 3.65: Admin Profile Menu. Figure 3.65 shows the screen with profile menu and logout option appears after the 'person' icon is clicked. {width=\"5.46875in\" height=\"3.6305555555555555in\"} []{#_Toc187864256 .anchor}Figure 3.66: Manage Students. Figure 3.66 shows the screen that the user can view or delete user profile. {width=\"5.3597222222222225in\" height=\"3.558333333333333in\"} []{#_Toc187873622 .anchor}Figure 3.67: Confirm Delete Student's Account. Figure 3.67 shows a screen that the admin confirms to delete the student's account. {width=\"5.490972222222222in\" height=\"3.6458333333333335in\"} []{#_Toc187864258 .anchor}Figure 3.68: Review Claim Request. Figure 3.68 shows all the found items request to be claimed by the students in the table form. {width=\"5.768055555555556in\" height=\"3.829861111111111in\"} []{#_Toc187873624 .anchor}Figure 3.69: Claim Requests. Figure 3.69 shows a section displaying the details of found item and lost item for the user to compare the similarity between the items easily. Admin can switch to compare with item in another claim request by clicking the 'Compare' button. After clicking 'Compare button', the section displaying previous lost item details will be updated with the associated lost item details. {width=\"5.038194444444445in\" height=\"3.345138888888889in\"} []{#_Toc187878040 .anchor}Figure 3.70: Confirm Approve Claim Request. Figure 3.70 shows the screen admin need to confirm their intents to approve the claim request. {width=\"4.906944444444444in\" height=\"3.2576388888888888in\"} []{#_Toc187879264 .anchor}Figure 3.71: Confirm Reject Claim Request. Figure 3.71 shows the screen admin need to confirm their intents to reject the claim request. {width=\"4.847916666666666in\" height=\"3.21875in\"} []{#_Toc187873627 .anchor}Figure 3.72: Manage Item Category. Figure 3.72 shows a screen that admin can create, view, edit and delete the item category options. {width=\"4.907638888888889in\" height=\"3.2583333333333333in\"} []{#_Toc187873628 .anchor}Figure 3.73: Manage Item Color. Figure 3.73 shows a screen that admin can create, view, edit and delete the item color options. {width=\"5.014583333333333in\" height=\"3.3291666666666666in\"} []{#_Toc187879267 .anchor}Figure 3.74: Manage Item Location. Figure 3.74 shows a screen that admin can create, view, edit and delete the location options. {width=\"5.05in\" height=\"3.3534722222222224in\"} []{#_Toc187863517 .anchor}Figure 3.75: Claim Approval History Overview. Figure 3.75 shows an overview of all the claims that were approved or rejected by the admin. {width=\"5.768055555555556in\" height=\"3.829861111111111in\"} []{#_Toc187873631 .anchor}Figure 3.76: Claim Approval Details. Figure 3.76 depicts a screen where more details of a claim are displayed to the admin, which include the lost item details and found item details alongside the status of the claim (approved or rejected). Implementation Phase The development of the system for lost and found begins right after the phase of system design. This is the implementation phase where coding is necessary for the translation of the system design into an effective application. The proposed system will be both a mobile and a web app. In developing the web application, the front-end pages will be built using HTML, CSS, Bootstrap, and JavaScript. The mobile application will be done using Flutter, which gives an intuitive, responsive UI for mobile use. An API endpoint will be attached to the back-end server that connects through the API, facilitating the communication of the mobile application with the backend for actions: registering an item; an image-matching request coming from the user\\'s side; and approvals by admins. The proposed backend server will be powered by the Laravel framework, which will handle all the server-side activities: processing the requests, interaction with the database, and execution of the image matching algorithm. A database will be set up for storing information regarding users, item details, image information, and match results. It will also run on the API server: hosting the pre-trained AI model for doing image comparisons that could suggest possible matches of lost-found pairs. The AI model connects with the back-end server for automated matching. Verification Phase This stage is focused on validating whether the system meets its requirements or not. Accordingly, test cases are designed based on the system. Also, the functional testing ensures that main features are functioning according to specifications and the usability testing will make the user interface of the system in an accessible manner. This ensures that the system is on target and also delivers initial design and requirement by users. Maintenance Phase This is the phase where all the bugs encountered will be addressed to ensure user satisfaction and prolongs the system's lifespan. Conclusion In short, requirement analysis and system design phases of the Waterfall model is discussed in detailed in Chapter 3 which facilitate the development of the system in Chapter 4. In the requirement analysis phase, undergraduate students in UNIMAS are taken as the sample for the questionnaire to gather system requirements. Apart from that, use case diagram and use case specifications are built to ensure critical functionalities of the systems are considered and not missed. In the system design phase, system architectural design, activity diagrams, and class diagrams are designed. Furthermore, wireframes are designed to outline the user interface of the proposed system. This chapter ends with brief introduction to the other phases taken part in Waterfall. References {#references .unnumbered} About Us . (2024). Lost & Found Network. https://lostandfoundnetworks.com/page/About%20Us Anas, M., Saini, S., Agarwal, N., Khanna, A., Yadav, A., & Kaur, K. (2023). An Assistive Tool for Finding Lost Items: A Review, INTERNATIONAL JOURNAL OF ENGINEERING RESEARCH & TECHNOLOGY (IJERT) , 12(11). https://doi.org/10.17577/IJERTV12IS110077 App Store. (2023, November 11). Lost'NFound . App Store. https://apps.apple.com/my/app/lostnfound/id6470925549?platform=ipad Atlassian, B. (n.d.). Waterfall Methodology for Project Management | Atlassian. Atlassian. https://www.atlassian.com/agile/project-management/waterfall methodology Banoula, M. (2024, September 3). What is Tensorflow? Deep Learning Libraries & Program Elements . Simplilearn.com. https://www.simplilearn.com/tutorials/deep-learning-tutorial/what-is - tensorflow Download and install Android Studio | Android Developers . (2024). Android Developers. https://developer.android.com/codelabs/basic-android-kotlin - compose-install-android-studio#0 Fastfwd. (2022, March 14). What is Laravel? A Beginner's Introduction - fastfwd . Fastfwd. https://www.fastfwd.com/what-is-laravel/ GeeksforGeeks. (2023, December 29). Requirements Gathering Introduction, processes, benefits and tools. GeeksforGeeks. https://www.geeksforgeeks.org/requirements-gathering introduction- processes- benefits-and-tools/ GeeksforGeeks. (2024b, August 5). Bootstrap Tutorial . GeeksforGeeks. https://www.geeksforgeeks.org/bootstrap/ Habersham, L. (2021, June 16). Lost and Found: 4 Tips for Managing Commonly Misplaced Items. T-mobile. https://www.t-mobile.com/news/devices/lost -and-found-4-tips-for managing-commonly-misplaced-items Hoory, L., & Bottorff, C. (2024, October 15). What is waterfall methodology? Here's how it can help your project management strategy. Forbes Advisor. https://www.forbes.com/advisor/business/what-is-waterfall-methodology/ Jones, H. (2024, May 9). Improving cross-platform compatibility enhances digital accessibility . Baseline. https://www.baselinemag.com/news/improving-cross - platform-compatibility-enhances-digital-accessibility/ Karunaratne, A. (2022, September 17). Laragon is a modern, simple, and flexible Windows Development Environment that provides support for multiple PHP, Apache, and MySQL versions, with quick HTTPS setup, Quick-app templates, Composer, npm, and more . PHP.Watch. https://php.watch/articles/laragon - windows-php Laoyan, S. (2024, April 26). Guide to Waterfall Methodology: Free Template & Examples [2024] \u2022 Asana. Asana. https://asana.com/resources/waterfall -project-management methodology Lost and Found - apps on Google Play . (2024). https://play.google.com/store/apps/details?hl=en&id=com.techju.developer.lo tandfound Meet Android Studio . (n.d.). Android Developers. https://developer.android.com/studio/intro Nikitin, V. (2024, April). Software Development Methodologies: Types and comparison. Itransition. Onipe, D. T. (2023, May 7). Introduction to Flutter: Getting Started with Cross- Platform Development . DEV Community. https://dev.to/bigdexter/introduction-to-flutter-getting-started-with-cross - platform-development-mmg Petkovic, J., Duench, S., Trawin, J., Dewidar, O., Pardo, J. P., Simeon, R., DesMeules, M., Gagnon, D., Roberts, J. H., Hossain, A., Pottie, K., Rader, T., Tugwell, P., Yoganathan, M., Presseau, J., & Welch, V. (2021). Behavioural interventions delivered through interactive social media for health behaviour change, health outcomes, and health equity in the adult population. Cochrane Library , 2021 (6). https://doi.org/10.1002/14651858.cd012932.pub2 RemoteScout. (2023, September 13). Das Wasserfallmodell in der Softwareentwicklung. RemoteScout24 . https://remotescout24.com/en/blog/1217 - waterfall-model-in-software- development Run apps on the Android Emulator . (2024). Android Developers. https://developer.android.com/studio/run/emulator Simplilearn. (2024, July 24). What is FastAPI: The future of Modern Web development . Simplilearn.com. https://www.simplilearn.com/what-is-fastapi article Transfer learning and fine-tuning . (2024). TensorFlow. https://www.tensorflow.org/tutorials/images/transfer_learning Visual Studio vs Visual Studio Code - What's Best In 2024? (2024). https://www.turing.com/kb/ultimate-guide-visual-studio-vs-visual-studio-code Appendix A {#appendix-a .unnumbered} {width=\"7.800694444444445in\" height=\"4.395833333333333in\"} []{#_Toc187876565 .anchor}Figure A.0.1: Project Gantt Chart for FYP1. {width=\"9.395833333333334in\" height=\"4.230555555555555in\"} []{#_Toc187879271 .anchor}Figure A.0.2: Project Gantt Chart for FYP1. {width=\"9.693055555555556in\" height=\"5.11875in\"} []{#_Toc187879272 .anchor}Figure A.0.3: Project Gantt Chart for FYP2. Appendix B {#appendix-b .unnumbered} {width=\"4.790972222222222in\" height=\"7.691666666666666in\"} []{#_Toc187879273 .anchor}Figure B.0.1: Survey Form Description. {width=\"3.963888888888889in\" height=\"8.525in\"} []{#_Toc187878051 .anchor}Figure B.0.2: Section I for Demographics. {width=\"4.279861111111111in\" height=\"8.191666666666666in\"} []{#_Toc187879275 .anchor}Figure B.0.3: Section II for Current Experience and Challenges Faced. {width=\"5.496527777777778in\" height=\"8.35in\"} []{#_Toc187879276 .anchor}Figure B.0.4: Section II for Current Experience and Challenges Faced. {width=\"3.6277777777777778in\" height=\"8.975in\"} []{#_Toc187879277 .anchor}Figure B.0.5: Section III for Desired Features and Feedback.","title":"Fyp1 final report 80369"},{"location":"fyp1_final_report_80369/#declaration-declaration-unnumbered","text":"I hereby declare that the project is my original work. I have not copied from any other student's work or from any other sources except due to reference or acknowledgement is not made explicitly in the text, nor has any part had been written for me by another person. {width=\"1.1666666666666667in\" height=\"0.6319444444444444in\"} _______________________ (Ngu Keh Cong, 80369) 17^th^ January 2025 Faculty of Computer Science and Information Technology Universiti Malaysia Sarawak","title":"DECLARATION {#declaration .unnumbered}"},{"location":"fyp1_final_report_80369/#acknowledgement-acknowledgement-unnumbered","text":"I would like to express my deepest gratitude to everyone who supported and contributed to the successful completion of this Final Year Project (FYP). Firstly, my heartfelt thanks go to my beloved supervisor, Dr. Wang Hui Hui for giving me the opportunity to work under her supervision. Her invaluable guidance and insightful feedback had been giving me constant support throughout the FYP. I would also like to thank my FYP examiner, Dr. Sze San Nah for her constructive suggestions on my FYP, which greatly increase the project's quality. Furthermore, a special thanks go to FYP coordinator, Prof. Wang Yin Chai for his patience in giving guidelines of FYP, and answering students' questions to ensure a smooth process throughout the FYP journey. Next, I am sincerely grateful to my academic institution, Universiti Malaysia Sarawak (UNIMAS) because it provides the necessary resources, platform, and conducive environment for the students to complete the project. I would also like to acknowledge all the lecturers who have contributed to my academic growth. Furthermore, I am also grateful to my family and friends for their continuous support and tolerance throughout the project. I have found the source of strength and motivation from your moral support. Lastly, I would like to thank everyone who has indirectly contributed during this period. Your support has been invaluable and deeply appreciated.","title":"ACKNOWLEDGEMENT {#acknowledgement .unnumbered}"},{"location":"fyp1_final_report_80369/#abstract-abstract-unnumbered","text":"This project presents \\\"FindIt,\\\" an AI-driven mobile and web-based application designed to address inefficiencies in item recovery within university campuses. The system automates the matching of lost and found items by leveraging image matching technology, which can significantly reduce manual effort of both admin and students, and improving recovery rates. Waterfall model is applied in this project to guide development, and incorporating systematic phases such as requirements gathering, design, implementation, testing, and maintenance. To understand the critical issues with existing informal channels such as fragmented reporting processes and lack of timely update, and the suitable features to be included in the project, user feedback is collected via surveys in Google Form. FindIt is designed to integrate a robust feature set tailored for university students, likes AI-based image matching, real-time notifications, and status tracking of reported items are included in the mobile application. An administrator-focused web interface is also designed to ensure an efficient management of claims and user accounts. The system\\'s effectiveness was evaluated through functional and usability testing to highlights significant improvements in item recovery efficiency, user satisfaction, and system reliability. This project contributes to the application of AI in practical, particularly in improving campus experiences.","title":"ABSTRACT {#abstract .unnumbered}"},{"location":"fyp1_final_report_80369/#abstrak-abstrak-unnumbered","text":"Projek ini memperkenalkan \\\"FindIt,\\\" sebuah aplikasi mudah alih dan berasaskan web yang dipacu oleh AI, direka untuk menangani ketidakefisienan dalam pemulihan barang hilang di kampus universiti. Sistem ini mengautomatikkan padanan barang hilang dan ditemui dengan memanfaatkan teknologi pemadanan imej, yang dapat mengurangkan usaha manual oleh pentadbir dan pelajar, serta meningkatkan kadar pemulihan. Model Air Terjun digunakan dalam projek ini untuk membimbing pembangunan, dan menggabungkan fasa sistematik seperti pengumpulan keperluan, reka bentuk, pelaksanaan, ujian, dan penyelenggaraan. Untuk memahami isu kritikal dengan saluran tidak rasmi sedia ada seperti proses pelaporan yang berpecah dan kekurangan kemas kini tepat pada masanya, maklum balas pengguna dikumpulkan melalui tinjauan di Google Form. FindIt direka untuk mengintegrasikan set ciri yang kukuh disesuaikan untuk pelajar universiti, seperti padanan imej berasaskan AI, pemberitahuan masa nyata, dan penjejakan status barang yang dilaporkan dalam aplikasi mudah alih. Antara muka web yang berfokuskan pentadbir juga direka untuk memastikan pengurusan tuntutan dan akaun pengguna yang cekap. Keberkesanan sistem ini dinilai melalui ujian fungsian dan kebolehgunaan untuk menekankan peningkatan ketara dalam kecekapan pemulihan barang, kepuasan pengguna, dan kebolehpercayaan sistem. Projek ini menyumbang kepada aplikasi AI dalam amalan, terutamanya dalam meningkatkan pengalaman kampus.","title":"ABSTRAK {#abstrak .unnumbered}"},{"location":"fyp1_final_report_80369/#table-of-contents-table-of-contents-unnumbered","text":"DECLARATION [i](#declaration) ACKNOWLEDGEMENT [ii](#acknowledgement) ABSTRACT [iii](#abstract) ABSTRAK [iv](#abstrak) TABLE OF CONTENTS [v](#table-of-contents) LIST OF TABLES [vii](#list-of-tables) LIST OF FIGURES [viii](#list-of-figures) Chapter 1: Introduction [1](#chapter-1-introduction) 1.1 Introduction [1](#introduction) 1.2 Problem Statement [2](#problem-statement) 1.3 Project Scope [2](#project-scope) 1.4 Aims and Objectives [4](#aims-and-objectives) 1.5 Brief Methodology [4](#brief-methodology) 1.6 Significance of project [7](#significance-of-project) 1.7 Project Schedule [8](#project-schedule) 1.8 Expected outcome/Project outcome [8](#expected-outcomeproject-outcome) 1.9 Project Outline [8](#project-outline) Chapter 2: Literature Review [10](#literature-review) 2.1 Introduction [10](#introduction-1) 2.2 Review on Similar Existing Systems [10](#review-on-similar-existing-systems) 2.2.1 Overview [10](#overview) 2.2.2 Lost and Found [10](#lost-and-found) 2.2.3 Lost'NFound [17](#lostnfound) 2.2.4 Lost and Found Network [23](#lost-and-found-network) 2.3 Comparison of the Features in Existing Systems and Proposed System [30](#comparison-of-the-features-in-existing-systems-and-proposed-system) 2.4 Review on Technologies and Tools used in Development [33](#review-on-technologies-and-tools-used-in-development) 2.4.1 Laravel [33](#laravel) 2.4.2 Bootstrap [33](#bootstrap) 2.4.3 Flutter [34](#flutter) 2.4.4 Laragon [34](#laragon) 2.4.5 Visual Studio Code [34](#visual-studio-code) 2.4.6 TensorFlow [35](#tensorflow) 2.4.7 FastAPI [35](#fastapi) 2.4.8 Android Studio [36](#android-studio) 2.5 Conclusion [36](#conclusion) Chapter 3: System Analysis and Design [37](#system-analysis-and-design) 3.1 Introduction [37](#introduction-2) 3.2 Requirement Analysis Phase [38](#requirement-analysis-phase) 3.2.1 Data Analysis [38](#data-analysis) 3.2.1.1 Analysis of Demographic [39](#analysis-of-demographic) 3.2.1.2 Analysis on Reasons of Developing the Proposed System [41](#analysis-on-reasons-of-developing-the-proposed-system) 3.2.1.3 Analysis on Proposed System's Functionalities and Feedback [47](#analysis-on-proposed-systems-functionalities-and-feedback) 3.2.2 System Requirement Analysis [50](#system-requirement-analysis) 3.2.2.1 Functional Requirements [51](#functional-requirements) 3.2.2.1.1 Use Case Diagram [51](#use-case-diagram) 3.2.2.1.2 Use Case Specification [51](#use-case-specification) 3.2.2.1.3 Functional Requirements [63](#functional-requirements-1) 3.3 System Design Phase [65](#system-design-phase) 3.3.1 Overall System Architectural Design [65](#overall-system-architectural-design) 3.3.2 Activity Diagram [67](#activity-diagram) 3.3.3 Class Diagram [82](#class-diagram) 3.3.4 Wireframe [87](#wireframe) 3.3.4.1 Student User Interface [87](#student-user-interface) 3.3.4.2 Admin's User Interface [115](#admins-user-interface) 3.4 Implementation Phase [123](#implementation-phase) 3.5 Verification Phase [124](#verification-phase) 3.6 Maintenance Phase [124](#maintenance-phase) 3.7 Conclusion [124](#conclusion-1) References [126](#references) Appendix A [130](#appendix-a) Appendix B [133](#appendix-b)","title":"TABLE OF CONTENTS {#table-of-contents .unnumbered}"},{"location":"fyp1_final_report_80369/#list-of-tables-list-of-tables-unnumbered","text":"Table 2.1: Comparison of the Features of Three Existing Systems and Proposed System. [37](#_Toc187878849) Table 3.1: Use Case Specification for Register. [58](#_Toc187878850) Table 3.2: Use Case Specification for Login. [59](#_Toc187863396) Table 3.3: Use Case Specification for Logout. [60](#_Toc187863397) Table 3.4: Use Case Specification for Managing Student Profile (Student). [61](#_Toc187878853) Table 3.5: Use Case Specification for Managing Student Profile (Admin). [61](#_Toc187878854) Table 3.6: Use Case Specification for Report Lost/ Found Item. [62](#_Toc187878855) Table 3.7: Use Case Specification for Receiving Notifications on Potential Matches between Lost and Found Items [62](#_Toc187863401) Table 3.8: Use Case Specification for Viewing Reported Items. [63](#_Toc187863402) Table 3.9: Use Case Specification for Editing Reported Items. [64](#_Toc187863403) Table 3.10: Use Case Specification for Deleting Reported Items [65](#_Toc187863404) Table 3.11: Use Case Specification for Browsing and Searching Items. [65](#_Toc187863405) Table 3.12: Use Case Specification for Submitting Claim Request. [66](#_Toc187863406) Table 3.13: Use Case Specification for Tracking Claim Status. [67](#_Toc187863407) Table 3.14: Use Case Specification for Processing Claim Request. [68](#_Toc187863408) Table 3.15: Use Case Specification for Viewing Claim Approval History. [69](#_Toc187878864) Table 3.16: Use Case Specification for Managing Item Characteristics. [69](#_Toc187863410) Table 3.17: Functional Requirements. [70](#_Toc187878866)","title":"LIST OF TABLES {#list-of-tables .unnumbered}"},{"location":"fyp1_final_report_80369/#list-of-figures-list-of-figures-unnumbered","text":"Figure 1.1: Phases in Waterfall Model (Hoory & Bottorff, 2024). [14](#_Toc187873530) Figure 2.1: Registration. [20](#_Toc187863418) Figure 2.2: Login. [20](#_Toc187863419) Figure 2.3: Browse item by category (lost items & found items). [21](#_Toc187873533) Figure 2.4: Filter option. [21](#_Toc187879172) Figure 2.5: Browse item. [22](#_Toc187863422) Figure 2.6: View item details. [23](#_Toc187863423) Figure 2.7: Browse item lost nearby and recently. [23](#_Toc187877952) Figure 2.8: Publish lost or found item information. [24](#_Toc187879176) Figure 2.9: View my item. [25](#_Toc187877954) Figure 2.10: Edit and delete item information. [25](#_Toc187863427) Figure 2.11: Browse lost and found item. [27](#_Toc187863428) Figure 2.12: Filter by location. [28](#_Toc187863429) Figure 2.13: Search and filter. [28](#_Toc187863430) Figure 2.14: Message finder or owner. [29](#_Toc187873544) Figure 2.15: Publish lost or found item information. [30](#_Toc187873545) Figure 2.16: View my items. [30](#_Toc187877961) Figure 2.17: Delete item. [31](#_Toc187863434) Figure 2.18: Register account. [33](#_Toc187873548) Figure 2.19: Login. [34](#_Toc187864184) Figure 2.20: Main Page. [34](#_Toc187863437) Figure 2.21: Filtered by location and date posted. [35](#_Toc187879189) Figure 2.22: Social Media Page. [36](#_Toc187877967) Figure 2.23: Create new listing. [36](#_Toc187879191) Figure 2.24: My listings. [37](#_Toc187863441) Figure 2.25: Contact advertiser. [38](#_Toc187864190) Figure 3.1: Waterfall Methodology (RemoteScout, 2023). [47](#_Toc187879194) Figure 3.2: Analysis of Respondent's Age. [48](#_Toc187873557) Figure 3.3: Analysis of Respondent's Gender. [48](#_Toc187864193) Figure 3.4: Respondent Faculty Analysis. [49](#_Toc187879197) Figure 3.5: Analysis of the prevalence of misplaced, lost, or found items among university students. [50](#_Toc187877975) Figure 3.6: Analysis on Efficiency In Recovering Lost Items. [51](#_Toc187877976) Figure 3.7: Analysis on Accessibility of the Lost and Found Information. [51](#_Toc187873562) Figure 3.8: Analysis on the Level of Frustration of Searching Item Information Manually. [52](#_Toc187863450) Figure 3.9: Analysis on Necessity of a Centralized Lost and Found Management System. [52](#_Toc187879202) Figure 3.10: Analysis on the Level of Concern regarding the Inability to Track the Status of Lost Items. [53](#_Toc187864200) Figure 3.11: Analysis on the Satisfaction with the Speed of Lost and Found Item Updates. [54](#_Toc187864201) Figure 3.12: Analysis on the Inefficient Process of Requesting Updates on the Lost Items. [54](#_Toc187879205) Figure 3.13: Analysis on the Understanding of the Current Procedures for Reporting Lost or Found Items. [55](#_Toc187863455) Figure 3.14: Analysis on Prior Usage of Lost and Found System. [56](#_Toc187873569) Figure 3.15: Analysis on Most Desirable Feature for the Proposed System. [56](#_Toc187864205) Figure 3.16: Analysis on User Preference for Automatic Matching and Notification Features. [57](#_Toc187864206) Figure 3.17: Analysis on User Concerns about a Lost and Found System. [58](#_Toc187864207) Figure 3.18: Use Case Diagram. [60](#_Toc187864208) Figure 3.19: Overall System Architecture of Proposed System (FindIt). [74](#_Toc187864209) Figure 3.20: Activity Diagram for Register. [76](#_Toc187863462) Figure 3.21: Activity Diagram for Login. [77](#_Toc187863463) Figure 3.22: Activity Diagram for Logout. [78](#_Toc187863464) Figure 3.23: Browse and Search Item. [79](#_Toc187877993) Figure 3.24: Activity Diagram for Submit Claim Request. [80](#_Toc187864214) Figure 3.25: Activity Diagram for Tracking Item Claim Status. [81](#_Toc187864215) Figure 3.26: Activity Diagram for Report Lost/ Found Item. [82](#_Toc187877996) Figure 3.27: Activity Diagram for Editing Lost/ Found Item Information. [83](#_Toc187879220) Figure 3.28: Activity Diagram for Delete Lost/ Found Item. [84](#_Toc187863470) Figure 3.29: Activity Diagram for Student Manage Profile. [85](#_Toc187877999) Figure 3.30: Activity Diagram for Admin View Claim Approval History. [86](#_Toc187864220) Figure 3.31: Activity Diagram for Admin Manage Users [87](#_Toc187864221) Figure 3.32: Activity Diagram for Admin Manage Item Categories, Colours and Location. [88](#_Toc187878002) Figure 3.33: Activity Diagram for Admin Process Claim Request from Students [89](#_Toc187873588) Figure 3.34: Entity-Relationship Diagram of Proposed System. [90](#_Toc187863476) Figure 3.35: Student Register. [95](#_Toc187864225) Figure 3.36: Student Login. [96](#_Toc187864226) Figure 3.37: Homepage/ Item Listing Page. [97](#_Toc187873592) Figure 3.38: More Option. [98](#_Toc187863480) Figure 3.39: Profile Menu [99](#_Toc187863481) Figure 3.40: Confirm to logout. [100](#_Toc187863482) Figure 3.41: Profile Details. [101](#_Toc187864231) Figure 3.42: Additional Filter [102](#_Toc187879235) Figure 3.43: Item Details of a Found Item. [103](#_Toc187873598) Figure 3.44: Claim Justification. [104](#_Toc187863486) Figure 3.45: Item Details of a Lost Item. [105](#_Toc187863487) Figure 3.46: My Item. [106](#_Toc187864236) Figure 3.47: Item Details of 'My Lost Item'. [107](#_Toc187863489) Figure 3.48: Error Message for Edit Item Details. [108](#_Toc187864238) Figure 3.49: Edit Item page. [109](#_Toc187863491) Figure 3.50: Confirm to Edit Item Details. [110](#_Toc187863492) Figure 3.51: Confirm to Delete Item. [111](#_Toc187864241) Figure 3.52: Error to Delete Item. [112](#_Toc187879245) Figure 3.53: Potential Matches (My Item). [113](#_Toc187863495) Figure 3.54: Accept Potential Matches and Claim Item. [114](#_Toc187864244) Figure 3.55: Claim Justification. [115](#_Toc187879248) Figure 3.56: My Claims (My Item). [116](#_Toc187873611) Figure 3.57: Claim Details (My Claims). [117](#_Toc187873612) Figure 3.58: My Found Item (Item Details). [118](#_Toc187873613) Figure 3.59: Report Lost/ Found Item. [119](#_Toc187863501) Figure 3.60: Error Message of Reporting Item. [120](#_Toc187863502) Figure 3.61: Notifications [121](#_Toc187863503) Figure 3.62: My Claims. [122](#_Toc187878032) Figure 3.63: Admin Login. [123](#_Toc187863505) Figure 3.64: Admin Dashboard. [123](#_Toc187873619) Figure 3.65: Admin Profile Menu. [124](#_Toc187864255) Figure 3.66: Manage Students. [124](#_Toc187864256) Figure 3.67: Confirm Delete Student's Account. [125](#_Toc187873622) Figure 3.68: Review Claim Request. [125](#_Toc187864258) Figure 3.69: Claim Requests. [126](#_Toc187873624) Figure 3.70: Confirm Approve Claim Request. [127](#_Toc187878040) Figure 3.71: Confirm Reject Claim Request. [127](#_Toc187879264) Figure 3.72: Manage Item Category. [128](#_Toc187873627) Figure 3.73: Manage Item Color. [128](#_Toc187873628) Figure 3.74: Manage Item Location. [129](#_Toc187879267) Figure 3.75: Claim Approval History Overview. [129](#_Toc187863517) Figure 3.76: Claim Approval Details. [130](#_Toc187873631) Figure A.1: Project Gantt Chart for FYP1. [137](#_Toc187876565) Figure A.2: Project Gantt Chart for FYP1. [138](#_Toc187879271) Figure A.3: Project Gantt Chart for FYP2. [139](#_Toc187879272) Figure B.1: Survey Form Description. [140](#_Toc187879273) Figure B.2: Section I for Demographics. [141](#_Toc187878051) Figure B.3: Section II for Current Experience and Challenges Faced. [142](#_Toc187879275) Figure B.4: Section II for Current Experience and Challenges Faced. [143](#_Toc187879276) Figure B.5: Section III for Desired Features and Feedback. [144](#_Toc187879277)","title":"LIST OF FIGURES {#list-of-figures .unnumbered}"},{"location":"fyp1_final_report_80369/#chapter-1-introduction-chapter-1-introduction-unnumbered","text":"","title":"Chapter 1: Introduction {#chapter-1-introduction .unnumbered}"},{"location":"fyp1_final_report_80369/#introduction","text":"According to a study by Pixie Technology Inc., an average of 2.5 days per year is spent on searching for the lost items (Habersham, 2021), which wastes quite a vast amount of time, and the scenario is worse if the items are not found on time. Obviously, the study shows that the people are careless in handling personal items, and no doubt this scenario applies to the students too. Universities are huge and the students often have to travel to more than one location within the campus or between campuses during the course of one day. It can sometimes result in students misplace their personal belongings or lose their valuable items and don't know where they lost them. The current process to report and recover lost items is through word-of-mouth or social media groups only which is not efficient and reliable. These methods will cause a delay or failure of item retrieval. Hence, it is essential to develop a system to meet the needs of the university's students. The system utilizes a mobile application for the owner to upload images and item details of found items to enable the AI-driven image matching model matching images with the list of found items uploaded. This will help automate the matching of lost and found items by comparing the item characteristics and analyzing the image, reducing the manual effort on matching the possible lost and found items. In cases the image is unavailable when reporting the lost items, system will compare and match the items based on the item characteristics like item categories, item colours and location of item lost or found. Since timely notifications plays a significant role to enhance user experience and satisfaction, the notification system will notify users when there is any update regarding the status of the reported items, for instances, when there is new potential matches or approval of claim from the admin. The notifications will help reduce user's anxiety and frustration and feel more secure regarding the recovery process. On the other side, the admin plays the role to use web-based system to manage the items and approve the claim of the items. By implementing this lost and found system, there will be an improvement and increased efficiency of the university's lost and found operations.","title":"Introduction"},{"location":"fyp1_final_report_80369/#problem-statement","text":"In UNIMAS, currently there is no centralized platform for the students to report and recover lost items. Existing methods often relied heavily on word-of-mouth, notification in students' social media groups, or asking the staff about found items. This fragmented approach will delay the recovery process or even worse the item will not be recovered permanently (Anas et al., 2023) because it limits the visibility and accessibility for the owner outside these informal channels. Another problem is that the students can only report the lost items physically during office hours and ask for help of other students in the social media groups, leading to anxiety when they wait for updates. Consequently, the owner can't get real-time notifications when the similar item is found.","title":"Problem Statement"},{"location":"fyp1_final_report_80369/#project-scope","text":"The project involves developing both a mobile application and web-based system for the users who are students and the admin respectively to simplify the item recovery process in university by integrating an image matching model. The system does not focus on verification for the students' convenience, the mobile application, built with Dart and Flutter, is designed exclusively for them to access the services anytime and anywhere. Registration and login features are required in order to use the system. The mobile app will allow the students to upload photos if available and item descriptions in order to report the lost items or found items. After this, the AI model have to take over the job to compare the uploaded photos with the existing photos in the database to display the potential matches results to both students and the admins if there is any. Item characteristics will also be considered in matching items. Next, the app will provide real-time notifications to inform the owner whenever there is new potential match or the item is approved for claiming. The student is allowed to request claiming the items not in the match result too. For the web-based system, which built with PHP and Laravel, is designed for the administrator to manage the lost and found items. For instances, the admin will have the rights to view, create, edit and delete the item characteristics of the lost and found items. These item characteristics are the predefined options that the students must select from when reporting an item to ensure consistency and accuracy of the reporting process. The system will also enable the admin to review the potential matches given by the AI model and approve the claims. Apart from that, the system will give admin the ability to manage user accounts, like view, or delete the user account. Finally, an API is developed as a central communication layer to ensure the seamless data exchange between the mobile app, web-based system and the database. The data stored in the database should include user information, images and details of item, and the matching result. The uploaded photos will be compared with the existing photos in the database, and if there is any potential matches between the lost and found items, the students and the admin will be notified. The owner can request to claim the item from the list of potential matches or list of found items manually.","title":"Project Scope"},{"location":"fyp1_final_report_80369/#aims-and-objectives","text":"To design and develop the FindIt: Simplifying Campus Item Recovery with AI-Driven Lost and Found app To integrate AI-driven features for automating item matching processes within the app To evaluate the usability and functionality of the lost and found App.","title":"Aims and Objectives"},{"location":"fyp1_final_report_80369/#brief-methodology","text":"Waterfall is chosen as the methodology to manage this project. It is a widely used project management method characterized by a sequential and linear process (Hoory & Bottorff, 2024). The methodology consists of 5 phases of management, where each phase requires a deliverable from the previous phase before proceed to the next phases (Hoory & Bottorff, 2024). The methodology emphasizes comprehensive documentation for each phase which helps in maintaining the clarity throughout the software development lifecycle (SDLC). Even though the effort of documenting the project is cumbersome, but the detailed documentation helps tracking the project's progress easier and simplifies software maintenance and further improvement and modernization on the system (Nikitin, 2024). This is one of the reason waterfall methodologies is suitable for the project. Another reason is the methodology suitable for the project with well-defined requirements (Nikitin, 2024) and requires upfront planning which aligns well with academic requirements for project report. Referring to figure 1.1, waterfall methodology consists of 5 phases, requirements, design, implementation, verification, and maintenance. {width=\"3.3979166666666667in\" height=\"2.279861111111111in\"} []{#_Toc187873530 .anchor}Figure 1.1: Phases in Waterfall Model (Hoory & Bottorff, 2024). Phase 1: Requirements This is the initial phase where all the project requirements are gathered from the students in the university. The students will be surveyed using questionnaire in Google Form to collect their insights and relevant data. The requirements collected will be analyzed and they should encompass the main functionalities of the system developed (GeeksforGeeks, 2023). This phase is important to ensure the system developed will be useful and meet the needs of the students. Phase 2: Design After the requirements is understood comprehensively, the next phase is to design the system or solutions to meet the requirements. The system design includes overall system architecture explaining the operation of system at a macro level. The interaction between users with the system will be illustrated using the use case diagrams, and then each identified use case will be further developed to provide the details descriptions in the use case specifications. Furthermore, activity diagrams will be built to define the system's workflows and processes, and class diagrams will outline the structure and relationships of the system's components. Then, the wireframes for the mobile application and mobile system will be designed. This phase serves as the guides for the implementation phase (Laoyan, 2024). Phase 3: Implementation Based on the requirements collected and solutions in the previous 2 phase, the system is developed in this implementation phase. Each system features will be developed one by one sequentially until forming a complete system. To identify and resolve the issues or bugs which arise throughout the development process, continuous testing are performed. Phase 4: Verification The system undergoes quality assurance during the verification phase (Atlassian, n.d.), where functionality and usability testing are conducted to ensure all the specified requirements and functions are met correctly. Any identified issues and bugs are documented and addressed in this phase. Phase 5: Maintenance The final phase is system maintenance. Continuous support for the software, such as fixing bugs, implementing updates or improvements based on the user feedback is critical to meet the evolving needs over time. This phase emphasizes maintaining system stability and enhancing functionality to keep the system reliable and effective.","title":"Brief Methodology"},{"location":"fyp1_final_report_80369/#significance-of-project","text":"The project plays a crucial role to address the current challenges faced by the students to recover the lost items conveniently and efficiently. Currently there is no standard procedure or guideline for the students to report the lost and found items, so the project helps in ensuring organized and not scattered lost and found information by providing a centralized platform to locate all of them in one platform. The students will no longer need to search for information across different sources like social media, messaging application, or word-of-mouth. Instead, the system will allow students to report and search items in one place, avoiding any key information of the lost item is overlooked. Apart from that, the project important in reducing the time and effort of the users to find a list of potential matches from a large amount of found items. With AI-driven image matching, visual characteristics of the item in the image will be compared automatically, bypassing the need for users to find the lost items by manually sifting through every found items, but instead focusing on the items which has been identified as potentially matched. This can greatly speed up the process of recovering the item. The redundancy of checking if the same item matched with the new report can be minimized since the system will take the roles actively monitoring the new reports, generating the potential matches automatically. This approach will keep the users away from committing extra effort since the system will \"do the searching and matching\".","title":"Significance of project"},{"location":"fyp1_final_report_80369/#project-schedule","text":"Gantt chart for the project schedule is attached in APPENDIX A.","title":"Project Schedule"},{"location":"fyp1_final_report_80369/#expected-outcomeproject-outcome","text":"A fully functional mobile application and web-based system which provide a formal channel to students in the entire campus to report and recover lost belongings. Improved lost items recovering efficiency to reduce delays or failed collections. The expected outcome is a fully functional AI-driven lost and found app that simplifies item recovery on campus, enhancing efficiency and user satisfaction.","title":"Expected outcome/Project outcome"},{"location":"fyp1_final_report_80369/#project-outline","text":"This Final Year Project Report consists of 6 chapters, which are introduction, literature review, requirement analysis and design, implementation, testing and finally conclusion and future work. Chapter 1 outlines the brief introduction and overview of the project. The chapter includes the project background, problem statement, project scope, objectives, methodology, significance of project, project schedule, expected outcome and the project outline. Chapter 2 focuses on literature review of the project. The features of the similar system existing in the market will be analyzed and compared with the proposed system. Technologies and tools used in the project will be covered in this chapter. Chapter 3 involves requirements and analysis of the project. The requirement gathered is analyzed in this chapter. All the necessary system design like system architecture design, use case diagram, use case specifications, activity diagram, class diagram and user interface is developed in this chapter. Chapter 4 depicts the implementation of the system. The system design is transformed to a functional system through the system development and implementation process. Chapter 5 covered testing, which focuses on the test plan, developing the test cases, and carried out functional and usability testing. Chapter 6 describes about the conclusion and future works. This chapter concludes the project and provides recommendations for possible future work to make improvements.","title":"Project Outline"},{"location":"fyp1_final_report_80369/#literature-review","text":"","title":"Literature Review"},{"location":"fyp1_final_report_80369/#introduction_1","text":"In this chapter, a detailed analysis on the existing systems which are similar to the system proposed in this project will be carried out to identify their strengths and limitations. Through reviewing these systems, valuable insights on how the system should be developed and designed will be gained. The conclusion drawn from the analysis will help in forming a system addressing the shortcomings identified in existing solutions.","title":"Introduction"},{"location":"fyp1_final_report_80369/#review-on-similar-existing-systems-review-on-similar-existing-systems","text":"","title":"Review on Similar Existing Systems {#review-on-similar-existing-systems}"},{"location":"fyp1_final_report_80369/#overview","text":"There will be 3 similar existing systems analyzed in this section, they are \"Lost and Found\", \"Lost'NFound\" and \"Lost and Found Network\". Their features will be discussed in the following section.","title":"Overview"},{"location":"fyp1_final_report_80369/#lost-and-found","text":"Lost and Found is a mobile application offered by Techju, designed as a community driven project to help users in recovering their misplaced or lost belongings via community support. ( Lost and Found - Apps on Google Play , 2024). The application aims to improve trouble-free lost and found process by streamlining the process of recovering the lost items. In addition to retrieve the lost items, the platform promotes the communal awareness and a sense of responsibility for the people using it ( Lost and Found - Apps on Google Play , 2024). {width=\"1.4722222222222223in\" height=\"2.953472222222222in\"} []{#_Toc187863418 .anchor}Figure 2.1: Registration. Before the users can start using all the functions provided by the platform, registration is necessary. A non-registered user is not allowed to report and post the lost and found information in the system. Referring Figure 2.1, the name, email address, phone number, and password need to be provided to complete the registration process. {width=\"1.4694444444444446in\" height=\"2.938888888888889in\"} []{#_Toc187863419 .anchor}Figure 2.2: Login. As shown in Figure 2.2, the registered user can then login before proceed to use the system. User can reset the password in case they forget the password by clicking on the \"Forget Password\" option. The user can prefer to sign in with google to save time by reducing the hassle of creating and managing new account. {width=\"1.382638888888889in\" height=\"2.7041666666666666in\"} []{#_Toc187873533 .anchor}Figure 2.3: Browse item by category (lost items & found items). From Figure 2.3, all the items reported in the system are listed under 2 main categories which are \"lost items\" and \"found items\". This can help users to locate the desired lost and found information quickly and effectively. Users can navigate to the \"lost items\" category to put effort helping others find their belongings, or navigate to the \"found items\" category to check if the lost item was found by others. {width=\"1.3555555555555556in\" height=\"2.70625in\"} []{#_Toc187879172 .anchor}Figure 2.4: Filter option. Filter can be applied to a search to refine the search results, returning the possible match of items efficiently. For example, users are allowed to filter the search results by specify the country, and category as depicted in Figure 2.4. \"Country\" filter will ensure the lost or found items searched and returned are within a specific country while 'category' filter specifying the type of items searched to exclude irrelevant results. {width=\"1.4388888888888889in\" height=\"2.9180555555555556in\"} []{#_Toc187863422 .anchor}Figure 2.5: Browse item. Figure 2.5 shows that the user can browse the brief item's metadata such as the item image, name, item description, country, and the username. The user can prefer to report the lost or found item here by clicking on the \"+\" button so that they can quickly post the item information here if the desired lost or found item is not identified. {width=\"1.4861111111111112in\" height=\"3.223611111111111in\"} []{#_Toc187863423 .anchor}Figure 2.6: View item details. Figure 2.6 illustrates all the item details displayed to the users, such as location where the item is found, contact information of the person who upload the item, item category and offered reward. This information is useful to match the item with the rightful owners. {width=\"1.48125in\" height=\"2.9569444444444444in\"} []{#_Toc187877952 .anchor}Figure 2.7: Browse item lost nearby and recently. Figure 2.7 depicts that the system offers features for the users to browse the latest lost and found item. It can save the time and effort by reducing the possibility of searching through the outdated entries or records. Apart from that, the system enable the users to browse the lost and found items in their vicinity, providing convenience to the users. {width=\"1.4708333333333334in\" height=\"2.96875in\"} []{#_Toc187879176 .anchor}Figure 2.8: Publish lost or found item information. From Figure 2.8, users are required to provide the item image, item name, phone number, reward to the person who find it if any, item category, date, location and item description when publishing a lost or found item on the platform. The comprehensive information provided will maximize the chance of reuniting the items with the owner. The platform allows users to pin a location in the map to show a more accurate reference point for others. {width=\"1.3423611111111111in\" height=\"2.688888888888889in\"} []{#_Toc187877954 .anchor}Figure 2.9: View my item. After publishing the lost or found item information in the platform, the user can navigate to review the all the item reported here as shown in Figure 2.9. {width=\"1.3347222222222221in\" height=\"2.6930555555555555in\"} []{#_Toc187863427 .anchor}Figure 2.10: Edit and delete item information. Figure 2.10 shows that the user can edit the post by clicking on the \"Edit\" button, and \"delete\" to remove the post after the item is found and returned. Strengths of Lost and Found Sign in using Google The \"Sign in with Google\" functionality help simplify the process of registration, as the user no longer need to provide their name, email address, phone number, password and more personal details. The feature also simplifies the login process by eliminating the needs to remember separate credentials for the mobile application, allowing users to login with the same credentials as their Google account. Apart from that, this feature applies Google Authenticate to adds an additional layer of security when the user login. Weaknesses of Lost and Found No email verification upon account registration (excluding \"sign in with google\" is inherently secure) After the user had registered an account, no authentication code is sent to their email for verification purpose which may lead to duplicate accounts with invalid email addresses, affecting the platform's reliability. A valid email is important for the user to receive notifications like item match alerts and password reset. This could compromise the integrity of the lost and found process, preventing the users from registering an account since the malicious users had register fake accounts using the legitimate email addresses.","title":"Lost and Found"},{"location":"fyp1_final_report_80369/#lostnfound","text":"The Lost'NFound mobile application connect together the item owner who lost the item and the finder. GPS technology is utilized in this mobile application to assist the users to find the lost and found item more conveniently by showing all the items reported lost or found nearby to the user location ( Lost and Found - Apps on Google Play , 2023). The app emphasizes on the privacy of the users since the user don't have to register to use the mobile apps ( Lost and Found - Apps on Google Play , 2023). Hence, communication take place without personal information revealed to others. {width=\"1.6194444444444445in\" height=\"3.3631944444444444in\"} []{#_Toc187863428 .anchor}Figure 2.11: Browse lost and found item. Figure 2.11 showcases homepage of the application where all the item reported lost or found near the user location are displayed. The items are divided into 2 main sections, which are \"found items\" and \"lost items\". If the user would like to view the lost and found item not in their current location, they can choose a different location rather than their current location by clicking on the address shown in the top part of Figure 2.11. {width=\"1.5777777777777777in\" height=\"3.2840277777777778in\"} []{#_Toc187863429 .anchor}Figure 2.12: Filter by location. Figure 2.12 clearly illustrates that the user can switch their current location by pinpointing the desired location in the map. The red pin in the map can be dragged and moved to any location. The item lost and found near the latest location pinned in the map will be returned in the search result after the \"add location\" is clicked. {width=\"1.6736111111111112in\" height=\"3.495833333333333in\"} []{#_Toc187863430 .anchor}Figure 2.13: Search and filter. As depicted in Figure 2.13, Lost'NFound mobile application provides a feature to search specific items with an accurate location as the filter. Normally other lost and found system only allow to apply filter of broader categories such as country and city, but not accurate up to an exact location. This functionality is achieved by allowing the users to pin the location on the map. {width=\"1.5909722222222222in\" height=\"3.285416666666667in\"} []{#_Toc187873544 .anchor}Figure 2.14: Message finder or owner. As shown in Figure 2.14, the \"Message\" button is available for the users to click on to start communicating with the finder or owner of the items. The communication happens in the app, and no personal information such as the phone number and email addresses will be shared or leaked to the other party in this process. {width=\"1.4479166666666667in\" height=\"2.9902777777777776in\"} []{#_Toc187873545 .anchor}Figure 2.15: Publish lost or found item information. Similar to other lost and found system, the platform allow user to post their lost and found items as shown in Figure 2.15. {width=\"1.4013888888888888in\" height=\"2.9291666666666667in\"} []{#_Toc187877961 .anchor}Figure 2.16: View my items. Figure 2.16 depicts that the user can review all the items they have reported in the past. All the published item information is listed under 2 main sections which are \"Found Items\" and \"Lost Items\". {width=\"1.4180555555555556in\" height=\"2.922222222222222in\"} []{#_Toc187863434 .anchor}Figure 2.17: Delete item. Figure 2.17 showcases that the user can delete the item they have posted in the platform after a successful retrieval process. There is no option to edit the item information and the only choice is to delete the post and create a new one. Strengths of Lost'NFound Pin location to filter search results The geolocation feature enables the users to pin a specific location on the map as a filter for the search results. It has improved the system usability and effectiveness because this is an intuitive way for users to visualize and select locations with greater precision. Normally other systems only offer filter option of country, state, or city, not accurate up to specific area. An accurate location filter ensures a high accuracy search, which aids in narrowing down the search results to those closest to the pinned location and hence saves time to identify desired posts of lost or found item information. No exposure of private contact information There are no user's contact details like email addresses and phone number displayed in the lost or found item information to keep their private information secure. To achieve this, in-app chat feature is provided to ensure secure communication between the users. Thus, any potential risks of harassment and spam will be avoided, encouraging the users to interact with each other without any concern of exposing any sensitive data. Weaknesses of Lost'NFound Too few filter option available for searching items The system only offers one filtering options for searching, which can hinder the user from getting the best out of the search. For instance, there is no option to filter by category, meaning users cannot opt to see results by item type. This limitation contributes to a longer search time to filter through unrelated results, negatively affecting the overall efficiency and user experience with the system. Item information cannot be edited, only option to delete is available The system does not allow users to update or modify the information of an item once it has been posted. The only option available is to delete the post and create a new post entirely if there is any errors or needs to update the item details ensuring most up-to-date information. This shortcoming reduces the system usability and user satisfaction.","title":"Lost'NFound"},{"location":"fyp1_final_report_80369/#lost-and-found-network","text":"Lost and Found Network is a global search engine for lost and found information developed by Greenitco Technologies Pvt Ltd (About Us, 2024). The system can be accessed in both form of website and mobile application, catering to a broader audience. This dual-platform availability improves the accessibility significantly, allowing seamless interaction with the system and providing convenience for users with different preferences (Jones, 2024). It has even provided a Facebook page where the lost and found information is shared to increase the exposure and reach broader audiences and those who are hard-to-reach (Petkovic et al., 2021). {width=\"5.604861111111111in\" height=\"3.123611111111111in\"} []{#_Toc187873548 .anchor}Figure 2.18: Register account. Figure 2.18 depicts that pre-registration is necessary before the user can access to functions like listing the lost and found information in the system. {width=\"5.611805555555556in\" height=\"3.321527777777778in\"} []{#_Toc187864184 .anchor}Figure 2.19: Login. The users must provide valid credentials such as email address, password, alongside passing the reCAPTCHA verification to login successfully as shown in Figure 2.19. {width=\"5.691666666666666in\" height=\"3.4055555555555554in\"} []{#_Toc187863437 .anchor}Figure 2.20: Main Page. Figure 2.20 illustrates the main page of the website where the users can browse all the item listings here. The user can search for specific lost or found item by inputting the item's name or descriptions in the search bar alongside with filter option which includes the item categories and location. The returned search results are based on the search keywords and the filters applied. If the user wants to display the item based on the filter alone, the user can click on the category name to view all the items related to the category. Each listing includes a photo, description, location, and date of the incident. {width=\"5.718055555555556in\" height=\"3.3819444444444446in\"} []{#_Toc187879189 .anchor}Figure 2.21: Filtered by location and date posted. Additionally, the system allows the users to solely filter the result based on the location or date posted as shown in Figure 2.21. {width=\"5.768055555555556in\" height=\"2.676388888888889in\"} []{#_Toc187877967 .anchor}Figure 2.22: Social Media Page. As shown in Figure 2.22, the lost and found item information will be shared in the social media, Facebook page here to reach broader audience increasing the possibility of recovering the lost items. {width=\"5.148611111111111in\" height=\"3.1125in\"} []{#_Toc187879191 .anchor}Figure 2.23: Create new listing. As illustrated in Figure 2.23, Every registered user is allowed to create a new listing for lost or found items by providing the relevant item details such as category, item type (lost or found), name, description, any offered rewards, city, contact information (email and phone number) of reporter, and photo if available. {width=\"5.045833333333333in\" height=\"3.002083333333333in\"} []{#_Toc187863441 .anchor}Figure 2.24: My listings. As shown in Figure 2.24, the user can view their own listing of items in the system. After the items is reported to be lost or found in the system, the items will not be listed right away and publicly visible to other users. The listings must first receive approval from the system admin in advance. Apart from that, the user are free to edit or delete the item details before or after the item is listed successfully in the system anytime to ensure flexibility in case of errors. {width=\"5.135416666666667in\" height=\"3.0791666666666666in\"} []{#_Toc187864190 .anchor}Figure 2.25: Contact advertiser. The system allows the user to contact the advertiser (owner or the person who found an item) using in-app chat function to claim or return items as shown in Figure 2.25. To initiate the chat, the user simply needs to enter the phone number and messages. Alternatively, the user can call the advertiser directly if the situation is emergency since the phone number is provided in the item listing details. Strengths of Lost & Found Network Provide official social media page for higher exposure of information The system owns a social media page where the lost and found information will be posted on it to help increase the visibility, ensure reaching the audience not actively use the application itself. The social media posts can be shared easily and circulated among a wider network, positively increasing the chance of recovering the lost items. More filter option (i.e. by the number of days since an item was posted) Lost & Found Network adds usability by allowing people to filter the items based on the days since the items were posted. This helps users find what they need faster without having to wade through potential item information in a large database. Weaknesses of Lost & Found Network Wait for approval before the item details publicly visible The system requests the users to go through an approval process to make the item details visible. Although this step may help ensure the integrity and authenticity of the item information shared on the system, it can lead to delays, especially in contexts that are urgent where people need immediate visibility of their lost or found items. The waiting period might affect the overall user experience and satisfaction for the students who are in a urgent situation.","title":"Lost and Found Network"},{"location":"fyp1_final_report_80369/#comparison-of-the-features-in-existing-systems-and-proposed-system","text":"[]{#_Toc187878849 .anchor}Table 2.1: Comparison of the Features of Three Existing Systems and Proposed System. Systems Features Existing Systems Proposed System Lost and Found Lost\u2019NFound Lost and Found Network FindIt Platform iOS and Android iOS and Android iOS, Android and Website Android Pre-registration Yes No Yes Yes Target user Public Public Public Students Browse lost and found information Yes Yes Yes Yes Search option Yes Yes Yes Yes Filter option Yes Yes Yes Yes Report lost and found item Yes Yes Yes Yes Edit lost and found information Yes No Yes Yes Delete lost and found information Yes Yes Yes Yes Pin location Yes Yes No Yes Built-in chat system No Yes Yes No Image matching between lost and found items No No No Yes Device notifications No Yes Yes Yes Email notifications No No Yes Yes Browse recovered item information No No No Yes Approval for listing item No No Yes No Track the status of reported lost and found item No No No Yes Submit claim request No No No Yes Based on Table 2.1, 'Lost and Found Network' has the most features among the existing systems while 'Lost and Found' and 'Lost'NFound; have the least features among the existing system. All the existing systems have provided all the basic features required in a lost and found system like manage, search, filter and browse the lost and found information. 'Lost and Found network' has some special feature that other 2 existing systems does not offer. One of them is receiving approval to list the item and make it publicly visible to all the users. Another feature is that the ability for the user to receive email notifications from the system. The proposed system, 'FindIt' supports Android platform only and is specifically designed for university students, whereas the existing systems focus on public and supports platforms, including Android, iOS, and websites. By focusing on university students as the target audience, the system will be more tailored to their needs. The system provides most of the main features offered by the existing systems and offers a few improvements over the existing system as shown in the Table 2.1. Firstly, 'FindIt' introduces a special feature not found in the existing system, etc. image matching between the lost and found items. The feature will help improve the efficiency in item recovery thanks to the automation in matching the items using images. Moreover, 'FindIt' allows the students to track the status of the reported items and request for a claim, ensuring the lost and found process is transparent and structured. Unlike some of the existing systems, 'FindIt' does not provided features to send message to other users in the system. This is because no necessity for communication between the students since all the found item will be returned to the admin temporarily before the true owner is identified. Additionally, 'FindIt' does not request the students to receive approval for item listings because this will consume more time for the recovery process, affecting the efficiency of the systems badly. Overall, the proposed system is a competitive and innovative solution to be implemented in university campus for the students.","title":"Comparison of the Features in Existing Systems and Proposed System"},{"location":"fyp1_final_report_80369/#review-on-technologies-and-tools-used-in-development","text":"","title":"Review on Technologies and Tools used in Development"},{"location":"fyp1_final_report_80369/#laravel","text":"Laravel is an open-source and powerful PHP framework designed to streamline the process of developing the web applications. The framework follows the model-view-controller (MVC) architecture which separate the development process into three interconnected components: model, view and controller (Fastfwd, 2022). This approach will help to produce organized and maintainable code. With its eloquent Object-Relational Mapping system, the developer can interact with the database using PHP syntax, avoid using the complex SQL queries (Fastfwd, 2022). It can save a lot of time to access and query the database. Laravel also includes the feature which is the blade templating engine which allow the developers to create lightweight template for the web pages easily (Fastfwd, 2022). It is well-suited to develop the website of the proposed system: FindIt since Laravel provide an extensive list of powerful features.","title":"Laravel"},{"location":"fyp1_final_report_80369/#bootstrap","text":"Bootstrap is a CSS framework aims to simplify web design by providing a collection of easy-to-use tools. Responsive grid system, pre-designed components and customized utilities are provided to help developers quickly creating web design that can adapt to device with different size seamlessly. There are also some JavaScript plugins provided in the framework (GeeksforGeeks, 2024b). With these amazing features provided, quick development of professional-looking web design is possible since the developers no longer need to design the webpage from scratch and instead use the pre-designed components which ensure consistency design across different webpage (GeeksforGeeks, 2024b). Therefore, more effort can be assigned to content creation and logic implementation.","title":"Bootstrap"},{"location":"fyp1_final_report_80369/#flutter","text":"Flutter is a framework built on Dart, designed for building platform-independent mobile apps. It supports cross-platform development where the developers can design single code producing apps that can operate on different platforms, like Android, iOS, desktop and web. Flutter includes integrated tools for testing and debugging, allowing developers to quickly identify and address any problems during development process. Besides, key features of Flutter encompass the accessibility to native features, and customized widgets and tools which are all important factors of building a visually appealing and highly functional mobile apps (Onipe, 2023).","title":"Flutter"},{"location":"fyp1_final_report_80369/#laragon","text":"Laragon is a simple, modern and flexible Windows development server which integrates a few programming languages, database management tools, DNS services, web servers and terminal emulators to ease the software development process for PHP and Node JS applications. For example, PHP, Apache, Nginx, MySQL, Node JS are provided. Laragon provides a user-friendly interface where the developers can control all the software it manages such as turn on or off the server processes. Manual efforts are greatly reduced since Laragon is responsible to configure the necessary files and updates system paths automatically once switching between different versions of the extensions happened (Karunaratne, 2022). This tool is definitely a good option to run and debug the system in the development server.","title":"Laragon"},{"location":"fyp1_final_report_80369/#visual-studio-code","text":"Visual Studio Code is a code editor that offers a vast array of features in the form of plugins which the developers can install to their development environment according to their demands and requirements. Its cross-platform compatibility supports installation on different platforms, including macOS, Windows, and Linux. Visual Studio Code ships with Node.js, Typescript, Javascript in default, while its extension ecosystem supports for different programming languages such as Python, C++, Java, C#, PHP and etc ( Visual Studio Vs Visual Studio Code - What's Best in 2024? , 2024). It is suitable for this project due to its ease of use, extensibility, and flexibility.","title":"Visual Studio Code"},{"location":"fyp1_final_report_80369/#tensorflow","text":"TensorFlow is an open-source framework introduced by Google to build different machine learning and deep learning models. It is primarily used to perform computations on big numerical datasets (Banoula, 2024). These computations refer to two main processes in machine learning and deep learning: training and inference. TensorFlow was intended to run on many CPUs or GPUs, and increasingly many mobile operating systems ( Introduction to TensorFlow and Keras --- Deep Learning With TensorFlow , n.d.). TensorFlow can also be used to access and integrate the pre-trained model into the proposed system ( Transfer Learning and Fine-tuning , 2024).","title":"TensorFlow"},{"location":"fyp1_final_report_80369/#fastapi","text":"FastAPI is a high-performance web framework enabling developers to build APIs with Python. As one of the fastest web frameworks available, it can process multiple requests at the same time. Its Python 3.7++ capabilities allow the creation of reliable APIs with little code. It has offered powerful features like generating documentation automatically for APIs using Swagger UI and ReDoc based on the type hints and docstrings in the code, which reduces development time and increases API comprehension. Additionally, it also helps in data validation as it automatically validates request and input data, ensuring consistency and reducing errors (Simplilearn, 2024). For these reasons, it is chosen to build the API for the AI model, enabling seamless communication between the system and AI model.","title":"FastAPI"},{"location":"fyp1_final_report_80369/#android-studio","text":"Android Studio is the official Integrated Development Environment (IDE) for developing android mobile apps ( Download and Install Android Studio | Android Developers , 2024). The emulator that comes with Android Studio enables developers to test their applications in a simulated environment that mirrors real Android devices. It is available in many screen sizes, resolutions and Android versions for testing purposes ( Run Apps on the Android Emulator , 2024). Besides its powerful emulator, Android Studio also provides a unified environment where developers can build, test and debug applications for all Android devices ( Meet Android Studio , n.d.). This combination caters to every aspect of the development process which minimizes the use of multiple tools.","title":"Android Studio"},{"location":"fyp1_final_report_80369/#conclusion","text":"In summary, a comprehensive review of three existing systems along with the proposed system are carried out in this chapter. The features, strengths and limitations of the existing systems are being discussed and analyzed. Then, the features of the existing systems and proposed system are compared. Additionally, the software tools used to develop the proposed lost and found system, including Laravel, Bootstrap, Flutter, Laragon, Visual Studio Code, TensorFlow, FastAPI, Android Studio, are reviewed.","title":"Conclusion"},{"location":"fyp1_final_report_80369/#system-analysis-and-design","text":"","title":"System Analysis and Design"},{"location":"fyp1_final_report_80369/#introduction_2","text":"This chapter discusses in detail the phases involved in the Waterfall Model software development methodology. The selection of methodology is crucial to define the systematic procedures to deliver a functional system within the specified timeframe. Figure 3.1 presents the phases of the Waterfall Model. The focus of this chapter will be placed on the first two phases, namely requirement analysis and system design, while the overview of the subsequent phases like implementation, verification and maintenance will be provided in this chapter. The requirement analysis phase has been divided into two sub-works, namely: Data Analysis and System Requirements Analysis. Data Analysis would involve questionnaire distributions to gather information whereby the data extracted will be subjected to detailed analysis for meaningful findings and identification of system requirements. In the system requirement analysis phase of software development, use case diagram is used to visualize the functional requirements of a system by illustrating the interactions between users (actors) and the system, ensuring all functional requirements are accounted for. For the system design phase, the focus is to develop comprehensive diagrams and documentation of the proposed system, such as a system architecture diagram, activity diagram, class diagram and wireframe. {width=\"3.3041666666666667in\" height=\"2.38125in\"} []{#_Toc187879194 .anchor}Figure 3.1: Waterfall Methodology (RemoteScout, 2023).","title":"Introduction"},{"location":"fyp1_final_report_80369/#requirement-analysis-phase","text":"Data analysis and system requirement analysis will be conducted via questionnaire and use case diagram respectively in this phase to ensure that all the requirements are captured accurately.","title":"Requirement Analysis Phase"},{"location":"fyp1_final_report_80369/#data-analysis","text":"Questionnaire is distributed to the respondents through Google Form to collect relevant data for analysis. The questionnaire is attached in APPENDIX B for reference. The target audience of this questionnaire is any undergraduate students in UNIMAS. The questionnaire was divided into three sections: Section I Demographics, Section II Current Experience and Challenges Faced, and Section III Desired Features and Feedback. Section I aims to collect the demographic details of the respondent, Section II aims to understand reasons of developing the proposed system while Section III aims to identify the necessary requirements to be included in the system and collect feedback from the respondents regarding the proposed system. A total of 33 respondents had answered the questionnaire and the data collected are presented in chart form for better analysis.","title":"Data Analysis"},{"location":"fyp1_final_report_80369/#analysis-of-demographic","text":"{width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187873557 .anchor}Figure 3.2: Analysis of Respondent's Age. As shown in Figure 3.2, most of the respondents (45.5%) are between 21 to 23 years old, followed by 30.3% of respondents with age group 18-20 years old and 24.2% of the respondents are between 24 to 26 years old. There is no respondent aged 27 and above. {width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187864193 .anchor}Figure 3.3: Analysis of Respondent's Gender. There are 54.5% of male respondents and 45.5% of respondents participated in the survey as depicted in Figure 3.3. {width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187879197 .anchor}Figure 3.4: Respondent Faculty Analysis. Figure 3.4 shows that Faculty of Economics and Business dominates with 60.6% of respondents. Faculty of Social Sciences and Humanities and Faculty of Cognitive Sciences and Humanities each account for 15.2% of respondents. Meanwhile, Faculty of Engineering has 6.1%, and the Faculty of Resource Science and Technology has 3%. The remaining faculties have no respondents taken part in this survey.","title":"Analysis of Demographic"},{"location":"fyp1_final_report_80369/#analysis-on-reasons-of-developing-the-proposed-system","text":"Section II of the Questionnaire focus on analysis of the reasons developing the proposed system. The following charts are the results of the questionnaire for Section II and will be analyzed in detail. From Figure B.3 in APPENDIX B, \"1\" always represents \"Strongly Disagree\" while \"5\" always represents \"Strongly Agree\" in the linear scale from 1 to 5 except for Figure 3.5. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187877975 .anchor}Figure 3.5: Analysis of the prevalence of misplaced, lost, or found items among university students. For the question shown in Figure 3.5, \"1\" represents \"Never\" while \"5\" represents \"Always\" in the linear scale from 1 to 5. The majority of respondents (33.3%) admits that they experienced frequent misplacement, loss, or finding of items in university. A considerable number of students (30.3%) has moderate frequency with the issue, while fewer students had less frequencies on the issue (15.2% for \\\"1,\\\" 12.1% for \\\"2,\\\" and 9.1% for \\\"3\\\"). Overall, this chart indicates that most of the students faced the problem of misplacing, losing, or finding items during university years. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187877976 .anchor}Figure 3.6: Analysis on Efficiency In Recovering Lost Items. Figure 3.6 shows that most of the respondents (61.5%) strongly agree that the current process of recovering lost items in university is not efficient, followed by 45.5% agree with the statement. Only 3% of the respondent stays in neutral position, while nobody disagreed with the statement. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187873562 .anchor}Figure 3.7: Analysis on Accessibility of the Lost and Found Information. Figure 3.7 shows that most of the respondents (57.6%) agree that the lost and found information within the university is not easily accessible, while 30.3% strongly agree to the statement. Only a small minority remained in a neutral position and disagree (9.1% and 3% respectively). {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187863450 .anchor}Figure 3.8: Analysis on the Level of Frustration of Searching Item Information Manually. Figure 3.8 shows that most of the respondents (75.8%) strongly agree that it is really frustrated to manually search through lost and found information, while 18.2% agree to the statement. Only a small minority remained in a neutral position (6.1%). {width=\"5.479166666666667in\" height=\"2.6055555555555556in\"} []{#_Toc187879202 .anchor}Figure 3.9: Analysis on Necessity of a Centralized Lost and Found Management System. Figure 3.9 illustrates that most of the respondents (72.7%) strongly agree that it is really frustrated to manually search through lost and found information, while 18.2% agree to the statement. Only a small minority remained in a neutral position (6.1%). {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187864200 .anchor}Figure 3.10: Analysis on the Level of Concern regarding the Inability to Track the Status of Lost Items. The majority of respondents (48.5%) strongly agree that they may feel worried if unable to track the status of the lost items as shown in Figure 3.10. Same amounts of respondents (45.8%) agree to the statement, while 3% of the respondents disagree to the statement. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187864201 .anchor}Figure 3.11: Analysis on the Satisfaction with the Speed of Lost and Found Item Updates. Figure 3.11 depicts that most of the respondents (57.6%) strongly agree that the updates on lost and found item is not timely, followed by 36.4% of the respondents agree to the statement. Only 3% of the respondents remains neutral for this statement and an equal percentages of respondents strongly disagree with the statement. {width=\"5.768055555555556in\" height=\"2.932638888888889in\"} []{#_Toc187879205 .anchor}Figure 3.12: Analysis on the Inefficient Process of Requesting Updates on the Lost Items. Figure 3.12 illustrates that most of the respondents (57.6%) strongly agree that the current method of requesting updates is inefficient, while 42.4% agree to the statement. None of the respondents disagree to the statement. {width=\"5.768055555555556in\" height=\"2.7430555555555554in\"} []{#_Toc187863455 .anchor}Figure 3.13: Analysis on the Understanding of the Current Procedures for Reporting Lost or Found Items. Most of the respondents (51.5%) strongly agree that they are unclear about the current procedures for reporting lost or found items, while 42.4% agree to the statement as shown in Figure 3.13. Only a small minority disagree to the statement (6.1%).","title":"Analysis on Reasons of Developing the Proposed System"},{"location":"fyp1_final_report_80369/#analysis-on-proposed-systems-functionalities-and-feedback","text":"{width=\"5.768055555555556in\" height=\"2.428472222222222in\"} []{#_Toc187873569 .anchor}Figure 3.14: Analysis on Prior Usage of Lost and Found System. Referred to Figure 3.14, of the 33 responses, majority of the respondents (78.8%) have no prior experience in using a lost and found system. Only 21.2% of the respondents have previously used a lost and found system. {width=\"5.768055555555556in\" height=\"2.932638888888889in\"} []{#_Toc187864205 .anchor}Figure 3.15: Analysis on Most Desirable Feature for the Proposed System. The chart represents the results asking respondents choosing the 5 features they think will be the most helpful in a lost and found system. Figure 3.15 depicts that most popular features among the respondents (over 70%) are reporting lost and found items, auto matching between lost and found items, push notifications for potential matches between lost and found items, and tracking the status of reported items. The moderately popular features chosen from the respondents (60-70%) are browsing lost or found items, and search and filter item. Lastly, the less popular features include registration and login, and viewing claim history. {width=\"5.768055555555556in\" height=\"2.6173611111111112in\"} []{#_Toc187864206 .anchor}Figure 3.16: Analysis on User Preference for Automatic Matching and Notification Features. Almost all the respondents (93.9%) would be more interested in using the proposed lost and found system if automatic matching between lost and found items and notifications features are provided in the system as shown in Figure 3.16, showing a strong preference for these features. {width=\"5.768055555555556in\" height=\"3.448611111111111in\"} []{#_Toc187864207 .anchor}Figure 3.17: Analysis on User Concerns about a Lost and Found System. As shown in Figure 3.17, there are a total of 8 responses given by the respondents for this open-ended question. 3 of the respondents show no concern over a lost and found system. One of the respondents expresses concern about the potential misuse of personal information shared within the system and whether non-students can access the system. This highlights the importance of preventing unregistered users to access the system. Furthermore, concerns are raised about the usability of the system. Hence, it is vital to ensure that the user interface is user-friendly. Another respondent asks about methods to reduce false claims. These concerns point to the need for a role takes part in approve the claim of an item. The data collected from the questionnaire during the system requirement analysis phase has given rich information that shall be helpful in developing the lost and found system. A number of key features are identified from the analysis, which should form part of the design of the system. The system should focus on the implementation of a user-friendly interface so as to ensure access and ease of use by the students. The questionnaire responses reveal a high demand for efficient reporting and tracking mechanisms regarding lost and found items. Moreover, the majority of respondents strongly preferred automated features such as the capability of item matching and push notification system in order to notify users about the potential match. Security aspects emerged as a significant concern, so it is necessary to restrict system access to registered users only. Additionally, an approval mechanism should be integrated to validate item claims, maintaining the system\\'s integrity by preventing fraudulent claims. The system has, therefore, been designed keeping in mind such basic and popular features as browsing, searching, and filtering. However, additional functionalities can be provided: user registration, login system, and tracking of previous claims. The implementation of these features derived from the questionnaire analysis will ensure the system effectively addresses user requirements, and enhance user satisfaction towards the system.","title":"Analysis on Proposed System's Functionalities and Feedback"},{"location":"fyp1_final_report_80369/#system-requirement-analysis","text":"A use case diagram helps identify functional requirements since it shows the interaction of the system with its users, or actors. In this way, it is easy to understand what the system is supposed to do for each actor. Each use case corresponds to a specific functional scenario that the system needs to support. Since the mapping between the actor and use cases are displayed clearly, a clear outline of the functionalities is available and hence no critical functions will be missing in the requirement analysis phase.","title":"System Requirement Analysis"},{"location":"fyp1_final_report_80369/#functional-requirements","text":"","title":"Functional Requirements"},{"location":"fyp1_final_report_80369/#use-case-diagram","text":"{width=\"4.815972222222222in\" height=\"6.591666666666667in\"} []{#_Toc187864208 .anchor}Figure 3.18: Use Case Diagram.","title":"Use Case Diagram"},{"location":"fyp1_final_report_80369/#use-case-specification","text":"[]{#_Toc187878850 .anchor}Table 3.1: Use Case Specification for Register. Use Case Name: Register Use Case ID: 1 Actor(s): Student Description: Create an account by providing required details. Preconditions: Student hasn\u2019t registered on the system yet. Postconditions: Account is created. Student is logged in. Student\u2019s details are stored in the system. Basic Path: Student navigates to the registration page. Student enters name, email, and password. Student clicks \u201cSign Up\u201d button. System validates the input. System checks for duplicated email addresses. System sends a verification email to the student. Student click the URL in the email to verify their email. New user account is created. Student is logged in automatically after a successful registration. Student receives notification on a successful registration. Alternative Path: A1.1: Invalid Email and Password Format Error message displayed. Student enters correct email and password. Resubmit the registration form. A1.2: Duplicate Email Error message displayed. Student use different email for registration. []{#_Toc187863396 .anchor}Table 3.2: Use Case Specification for Login. Use Case Name: Login Use Case ID: 2 Actor(s): Student, Admin Description: Login to system using valid credentials. Preconditions: User complete registering an account. Postconditions: Student is logged in. Basic Path: Student/ Admin navigates to the login page. Student/ Admin enters their email, and password. Student/ Admin clicks \u201cSign In\u201d button. System verifies the credentials against the database. Student/ Admin is redirected to the home page/ dashboard after login successful. Alternative Path: A2.1: Invalid Login Credentials Error message displayed. Student/ Admin re-enters email and password. Student/ Admin submit login request again. A2.2: Forgot Password Click \u201cForgot Password\u201d link. Student enters registered email address. Student receives password reset link in the email address. Student inputs the new password and submits the form. []{#_Toc187863397 .anchor}Table 3.3: Use Case Specification for Logout. Use Case Name: Logout Use Case ID: 3 Actor(s): Student, Admin Description: Logout to end the current session. Preconditions: User logged in Postconditions: Student logged out successfully. Student/ Admin redirected to the login page. Basic Path: Student/ Admin clicks on \u201cLogout\u201d option. Student/ Admin clicks on the \u201cConfirm\u201d button in the confirmation dialog to logout. Alternative Path: A3.1: Inactivity System logs the user out automatically due to inactivity. Student/ Admin is redirected to the login page. []{#_Toc187878853 .anchor}Table 3.4: Use Case Specification for Managing Student Profile (Student). Use Case Name: Manage Student Profile (Student) Use Case ID: 4 Actor(s): Student Description: Student can view and edit their own profile. Preconditions: Student logged in. Postconditions: Student\u2019s profile is updated if any changes applied. Basic Path: Student navigates to user profile section. System displays student\u2019s profile information. Student is allowed to modify the profile information like name and matric no. by choosing the option \u201cedit profile\u201d. Student click \u2018submit\u2019 button to submit the changes. System displays the updated profile to the student. Alternative Path: A4.1: Invalid Input 1. Input with invalid format is found by the system. 2. Error message displayed. 3. Student re-enters the information and submit the changes. []{#_Toc187878854 .anchor}Table 3.5: Use Case Specification for Managing Student Profile (Admin). Use Case Name: Manage Student Profile (Admin) Use Case ID: 5 Actor(s): Admin Description: Admin are allowed to view and delete all student\u2019s profile. Preconditions: Admin logged in Postconditions: Student\u2019s profile is deleted successfully if the admin confirms to take the action. Basic Path: Admin navigates to student section. System displays student\u2019s profile information. Student is allowed to delete the specific student\u2019s account for the system by clicking on the \u2018delete\u2019 button. System displays confirmation dialog for admin to confirm delete the account. System displays the updated students list (all registered students in the system). []{#_Toc187878855 .anchor}Table 3.6: Use Case Specification for Report Lost/ Found Item. Use Case Name: Report Lost/ Found Item Use Case ID: 6 Actor(s): Student Description: Student report the item they found or they lost Preconditions: Student logged in. Database is active and ready Postconditions: The new reported lost/ found item is stored in the database. Basic Path: Student clicks \u201c+\u201d button to initiate the reporting process. Student fills in all the required field of the report form, eg. item type, item name, item description, category, colour, and location lost/ found. Student uploads the image of the lost item if they have any. Student submits the report. System validates input in the report. The reported lost/ found item is stored in the database. Alternative Path: A6.1: Missing Required Details Error Message displayed. Student fills in all the mandatory field and submits the form. Reported lost/ found item is stored in the database. []{#_Toc187863401 .anchor}Table 3.7: Use Case Specification for Receiving Notifications on Potential Matches between Lost and Found Items Use Case Name: Receive Notifications on Potential Matches between Lost and Found Items Use Case ID: 7 Actor(s): Student Description: Notifies students on potential matches between a lost and a found item to facilitate the recovery process. Preconditions: Student has done reported a lost item in the system. Potential match is identified in the database. Student allows the system notifications. Postconditions: Student is notified of the potential matches. Basic Path: System looks for a potential match between the lost and found item based on the item characteristics like category, location, colour and the image similarity if images are provided by the students. Student receives push notifications from the system if potential matches for the item they reports has a potential match with any found item reported in the system. Students click on the push notifications. System redirects students to the notification sections in the system for complete notification details. Exception Path: E7.1: No Match Found There is no similar item in the system matching the item reported lost by the students. No notifications sent to the students. []{#_Toc187863402 .anchor}Table 3.8: Use Case Specification for Viewing Reported Items. Use Case Name: View Reported Items Use Case ID: 8 Actor(s): Student Description: Students can view the details of the items they have reported Preconditions: Student logged in. Student has done reported a lost/found item in the system. Postconditions: Item details displayed to the students. Basic Path: Student navigates to \u201cMy Item\u201d section System displays a list of all the reported items separated by item type (lost item, found item). Student select an item. Student navigates to item details subsection to view the detailed item details. Exception Path: E8.1: No reported item found System found no items reported by the student. Student receives informative message from the system explaining the situation. []{#_Toc187863403 .anchor}Table 3.9: Use Case Specification for Editing Reported Items. Use Case Name: Edit Reported Items Use Case ID: 9 Actor(s): Student Description: Allow students to update the item details Preconditions: Student logged in. The reported item not involved in a pending claim or approved claim. Postconditions: The item details are updated. Basic Path: Student navigates to \u201cMy Item\u201d section. Student selects an item from the item list to edit. Student clicks the \u201cEdit\u201d button under the \u201cItem details\u201d subsection. System displays the item details in an editable form. Student updates the item details. Student submits the form. System validates all mandatory field is filled. System display message on a successful edit. Alternative Path: A9.1: Missing Required Item Details Student submit the request to edit item details. System displays error message on some mandatory field in the form is not filled. Student fills in the missing details and submits the form. Exception Path: E9.1: Item is associated with a pending claim or approved claim. Students click the \u201cEdit\u201d button. System displays an error message indicating that any item involved in a pending or approved cannot be edited. []{#_Toc187863404 .anchor}Table 3.10: Use Case Specification for Deleting Reported Items Use Case Name: Delete Reported Items Use Case ID: 10 Actor(s): Student Description: Allow students to removes the item they have reported from the system. Preconditions: Student logged in The reported item not involved in a pending claim or approved claim. Postconditions: The reported item is removed from the system. Basic Path: Student navigates to \u201cMy Item\u201d section. Student selects an item from the item list to edit. Student clicks the \u201cDelete\u201d button under the \u201cItem details\u201d subsection. System prompts students on their intention to confirm delete the reported item. Student confirms delete the reported item. Exception Path: E10.1: Item is associated with a pending claim or approved claim. Students click the \u201cDelete\u201d button. System displays an error message indicating that any item involved in a pending or approved cannot be deleted. []{#_Toc187863405 .anchor}Table 3.11: Use Case Specification for Browsing and Searching Items. Use Case Name: Browse and Search Items Use Case ID: 11 Actor(s): Student Description: Allow students to locate the lost or found items by applying search filters and keywords. Preconditions: Student logged in Postconditions: Item list displayed to the students Students view the details of the specific item. Basic Path: Student access the homepage (browse and search page) initially. System displayed a list of items found in the order of date posted by default. Student can choose to view list of items lost by choosing the \u201cLost Item\u201d filter. Student applies the filters \u201ccategory\u201d, \u201ccolour\u201d and \u201clocation\u201d. Student search for items using keyword. System displayed all the items with matching keywords in the search results. Student clicks on the specific items to look for more details. Alternative Path: A11.1: Not Applying Filters (except the filter applied by default initially: lost item, found item) and Search Keyword Scroll to find the desired items. Choose specific items to view detailed item information. A11.2: Not Applying Filters Student inputs search keywords. Choose desired item from the search result to view item details. A3: Not Applying Search Keyword Students applies filter. Choose desired item from the filtered result to view item details. Exception Path: E11.1: No Matching Items Found System displays message highlighting no items matched the filters or search keywords. []{#_Toc187863406 .anchor}Table 3.12: Use Case Specification for Submitting Claim Request. Use Case Name: Submit Claim Request Use Case ID: 12 Actor(s): Student Description: Student can submit claim request on specific item to the admin for verification. Student can manually search for the item and submit request or accept the suggested matches from the system and submit request. Preconditions: Student logged in Postconditions: Admin receive the claim request. Basic Path: Student access homepage (browse and search page). Student search for or browse the list of items found. Student chooses specific items. Student clicks \u201cSubmit\u201d button. Student inputs the justification for claim in the text field. Confirm to submit the claim request. Alternative Path: A12.1: Accept Suggested Matches and Submit Claim Request Student reports the item they lost. System displays students the potential matches of the found items to their lost items in the \u201cMy Item\u201d section. Student chooses specific item. Student clicks \u201cClaim\u201d button to accept the suggestion and prepare to submit the claim request. Student inputs the justification for claim in the text field. Confirm to submit the claim request. []{#_Toc187863407 .anchor}Table 3.13: Use Case Specification for Tracking Claim Status. Use Case Name: Tracking Claim Status Use Case ID: 13 Actor(s): Student Description: Allow student to monitor the status of all the item they have requested to claim. Preconditions: Student logged in Student submits at least one claim. Postconditions: Student views claim status. Basic Path: Student access \u201cMy Claim\u201d section. All the submitted claims (via manual search or suggested matches) are displayed. Student views the claim status directly from the list or click to see more details of the claim. Alternative Path: A13.1: Access \u201cMy Item\u201d section to track claim status Student access \u201cMy Item\u201d section. Student select the specific item. Student navigates to \u201cMy Claims\u201d subsection. System displayed a list of claims submitted via suggested matches. Student views the status of the claim directly from the list or click to see more details of the claim. Exceptional Path: E13.1: No Claims Submitted The student has no submitted any claim. System display message highlights that no claim is found. []{#_Toc187863408 .anchor}Table 3.14: Use Case Specification for Processing Claim Request. Use Case Name: Process Claim Request Use Case ID: 14 Actor(s): Admin Description: Allow admin to approve or reject the claim requested by the students. Preconditions: Admin logged in At least one pending claim request found in the system. Postconditions: Claim request is approved or rejected. Claim status is updated. Basic Path: Admin accesses \u201cClaim Review\u201d page. All found items with pending claim request are displayed here. Admin choose an found item. System displayed all claim requests associated with the found item in the table and a section displaying the details of found item and the claimant justification. Admin clicks \u201ccompare\u201d button besides the claim requests to update the section including lost item details with the claimant\u2019s justification. Admin repeat steps 5 until finish reviewing all the claim requests. Admin approves or rejects the claim requests. Exceptional Path: E14.1: No Pending Claims Admin accesses \u201cClaim Review\u201d page. System displayed message highlighting that no claims are submitted for review. []{#_Toc187878864 .anchor}Table 3.15: Use Case Specification for Viewing Claim Approval History. Use Case Name: View Claim Approval History Use Case ID: 15 Actor(s): Admin Description: Allow admin to view the history of all the request that had been processed. Preconditions: Admin logged in At least one claim processed. Postconditions: Admin views the history of claim approval. Basic Path: Admin accesses \u201cClaim Approval History\u201d page. System displayed all the processed claims. Admin views the status directly from the list or click the \u201cview\u201d button for more details. Exceptional Flow: E15.1: No Processed Claims Admin accesses \u201cClaim Approval History\u201d page. System displays message highlighting that no claims has been processed so far. []{#_Toc187863410 .anchor}Table 3.16: Use Case Specification for Managing Item Characteristics. Use Case Name: Manage Item Characteristics Use Case ID: 16 Actor(s): Admin Description: Allow admin to create, view, edit and delete the item characteristics (e.g. item category, colour and location) so that these characteristics will appear as the options in the dropdown menu for students to choose from during reporting an item. Preconditions: Admin logged in Postconditions: Admin views the existing item\u2019s characteristics. Any action made on the item characteristics are reflected (view, edit, delete) in the system. Basic Path: Admin navigates to page of specific item characteristics (item category, colour, and location) to manage the correspond item characteristics. System displays a list of instances of the specific item characteristics found in the system. System displays all the options (create, edit, and delete) in the same page. Admin click \u201ccreate\u201d button to create new instances of the item characteristics in the system. Admin click \u201cedit\u201d to edit the current instances of the item characteristics in the system. Admin click \u201cdelete\u201d to remove the instances of the item characteristics from the system.","title":"Use Case Specification"},{"location":"fyp1_final_report_80369/#functional-requirements_1","text":"[]{#_Toc187878866 .anchor}Table 3.17: Functional Requirements. Requirement Description Priority User: Admin Login to the system High Logout of the system High View Student Profile High Delete Student Account High View Pending Claim Requests High Approve/Reject Claim Requests High View Claim Approval History High View Details of both Lost and Found Items in a Claim High Create, View, Edit and Delete Item Characteristics High User: Student Register New Account High Login to the System High Logout of the System High Reset Password if Forgot the Password Medium View Profile Information Medium Edit Profile Information Medium Report Item as Lost/ Found High Upload Image for Lost/ Found Item Medium View all their Reported Items High Edit their Reported Items (for Items not associated claim request in status pending or approved) Medium Delete their Reported Items (for Items not associated claim request in status pending or approved) Medium Search for Reported Items using Keywords High Filter Items High View Search Results High Submit Claim Request for Found Items High Provide Justification during claims (if any) Medium Track the Status of Submitted Claims High Notified on New Potential Matches for their Lost Items Medium View Potential Matches for their Lost Items Medium","title":"Functional Requirements"},{"location":"fyp1_final_report_80369/#system-design-phase","text":"The focus of the system design phase is to convert requirements into blueprints which can guide the development process. Designs like system architectural design, activity diagram and class diagrams are created in this phase. System architectural design is developed to provides a high-level structure of the system, showing the interactions between different system components. Apart from that, activity diagram is built to illustrate the system workflow clearly and help to understand more complex system logic with more ease. Finally, class diagram is designed to outline the system structure clearly by modeling the classes, attributes, methods and relationships between classes.","title":"System Design Phase"},{"location":"fyp1_final_report_80369/#overall-system-architectural-design","text":"{width=\"5.768055555555556in\" height=\"4.448611111111111in\"} []{#_Toc187864209 .anchor}Figure 3.19: Overall System Architecture of Proposed System (FindIt). Figure 3.19 shows the system architecture design for the proposed system, FindIt. There are 2 types of users in this system which are admin and student. Admin use website interface to access the system while student use mobile interface to access the system. A backend server is ready to accept the request from both admin and students and return corresponding data or results. Besides that, the web server also will store and protect the data. Furthermore, users interact indirectly with the shared database via backend server which plays the role to communicates with the shared database to store and retrieve data. Lastly, backend server plays the role to send request to api server to access the AI model when backend server receive request which needs the power of AI model, compare image and calculate similarity score in this case.","title":"Overall System Architectural Design"},{"location":"fyp1_final_report_80369/#activity-diagram","text":"{width=\"5.425694444444445in\" height=\"8.760416666666666in\"} []{#_Toc187863462 .anchor}Figure 3.20: Activity Diagram for Register. {width=\"5.768055555555556in\" height=\"7.134722222222222in\"} []{#_Toc187863463 .anchor}Figure 3.21: Activity Diagram for Login. {width=\"5.768055555555556in\" height=\"7.2243055555555555in\"} []{#_Toc187863464 .anchor}Figure 3.22: Activity Diagram for Logout. {width=\"5.768055555555556in\" height=\"6.6618055555555555in\"} []{#_Toc187877993 .anchor}Figure 3.23: Browse and Search Item. {width=\"5.768055555555556in\" height=\"6.878472222222222in\"} []{#_Toc187864214 .anchor}Figure 3.24: Activity Diagram for Submit Claim Request. . {width=\"5.768055555555556in\" height=\"6.877083333333333in\"} []{#_Toc187864215 .anchor}Figure 3.25: Activity Diagram for Tracking Item Claim Status. {width=\"5.768055555555556in\" height=\"5.927777777777778in\"} []{#_Toc187877996 .anchor}Figure 3.26: Activity Diagram for Report Lost/ Found Item. {width=\"5.768055555555556in\" height=\"6.471527777777778in\"} []{#_Toc187879220 .anchor}Figure 3.27: Activity Diagram for Editing Lost/ Found Item Information. {width=\"5.768055555555556in\" height=\"6.885416666666667in\"} []{#_Toc187863470 .anchor}Figure 3.28: Activity Diagram for Delete Lost/ Found Item. {width=\"5.768055555555556in\" height=\"6.133333333333334in\"} []{#_Toc187877999 .anchor}Figure 3.29: Activity Diagram for Student Manage Profile. {width=\"5.768055555555556in\" height=\"6.878472222222222in\"} []{#_Toc187864220 .anchor}Figure 3.30: Activity Diagram for Admin View Claim Approval History. {width=\"5.768055555555556in\" height=\"6.145138888888889in\"} []{#_Toc187864221 .anchor}Figure 3.31: Activity Diagram for Admin Manage Users {width=\"5.768055555555556in\" height=\"6.352777777777778in\"} []{#_Toc187878002 .anchor}Figure 3.32: Activity Diagram for Admin Manage Item Categories, Colours and Location. {width=\"5.768055555555556in\" height=\"7.352777777777778in\"} []{#_Toc187873588 .anchor}Figure 3.33: Activity Diagram for Admin Process Claim Request from Students","title":"Activity Diagram"},{"location":"fyp1_final_report_80369/#class-diagram","text":"{width=\"5.768055555555556in\" height=\"7.834027777777778in\"} []{#_Toc187863476 .anchor}Figure 3.34: Class Diagram of Proposed System. A class diagram is used to represent the structure of the system by giving details about the entities, attributes, methods and relationship between entities. As shown in Figure 3.34, there are nine classes involved in the class diagram, including \"Students\", \"Admins\", \"Items\", \"Locations\", \"Categories\", \"Colors\", \"Claims\", \"Matches\" and \"Notifications\". The \"Student\" class contains attributes such as \"student_id\", \"matric_no\", \"name\", \"email\", \"password\", \"email_verified_at\", \"created_at\", \"updated_at\", with methods \"claims()\", \"notifications()\", and \"items()\" which retrieves the claims made, notifications received and items reported by the student. Class \"Students\" establishes a one-to-many composition relationships with the class \"Claims\", indicated by the \"1\" on Students side and \"0...*\" on the Claims side because each student can claim none or more found item, while one claim can only be initiated by one student. The composition relationship between the classes shows that a claim cannot exist without the existence of a student. Meanwhile, the \"Students\" class has a one-to-many compositions relationships to the \"Items\" class,with \"1\" on Student side, and \"0...*\" on Items side because each student can report none or many items in the system, while an item can only be reported by one student only. The composition relationship depicts that items cannot without the context of user. The \"Notifications\" class contains attributes such as \"notification_id\", \"student_id\", \"message\", and \"created_at\". The methods \"student()\" is used to retrieve the students who had received the notifications. Class \"Notifications\"maintains a many-to-one composition relationships with the \"Student\" class, indicated by the \"0...*\" on Notifications side while \"1\" on Student side. It is because each student can receive none or more notifications, while one notification only sent to one student. The composition relationship shows a notification cannot exist without the linked student. The \"Admin\" class has attributes like \"admin_id\", \"name\", \"email\", \"password\", \"created_at\", and \"updated_at\". The class includes methods \"claims()\" retrieving all the claims approved or rejected by the admin. Class \"Admin\" has a one-to-many relationships with \"Claims\" table, where the cardinality is \"0...*\" on Claims side and \"1\" on Admin side because each admin can approve/ reject none or many claims, while a claim can only be approved/ rejected by one admin only. The \"Claims\" class has attributes like \"claim_id\", \"match_id\", \"lost_item_id\", \"found_item_id\", \"student_id\", \"admin_id\", \"status\", \"user_justification\", \"admin_justification\", \"created_at\" and \"updated_at\". Methods included in the class are \"students()\", \"admin()\", \"lostItem()\", \"foundItem()\" and \"match()\". They are responsible to retrieve the students who made the claim, admin who approve or reject the claim, the lost item involved in the claim, the found item involved in the claim, and also the match which triggers the claim respectively. \"Matches\" class has a one-to-one relationship with \"Claims\" class, indicated by \"0...1*\" on both side of Matches and Claims because each match can be ignored or accepted by the user one time only, if the claim based on the matches is rejected by the admin, the student cannot submit claim based on the rejected matches again. Also each claim can only involves none or one match only because a claim not necessary submitted based on a potential match suggested by the system. The class \"Matches\" contains attributes like \"match_id\", \"lost_item_id\", \"found_item_id\", \"similarity_score\", \"status\", \"created_at\" and \"updated_at\", with methods \"lostItem()\", \"foundItem()\" and \"claim()\" \"Items\", with the roles to retrieve the lost and found item involved in a match, and also the claim triggered by the match respectively. Class \"Items\" has a one-to-many composition relationships with \"Matches\" table for a single lost item, indicated by \"1\" on Items side and \"0...*\" on Matches side. This is because each lost item can be involved in none or many potential matches generated by the system, while a match must involve one lost item. Next, \"Items\" class has a one-to-many composition relationships with \"Matches\" class for a single found item, indicated by \"1\" on Items side and \"0...*\" on Matches side because each found item can be involved in none or many potential matches generated by the system, while a match must involved one found item. The composition relationships shows that the matches will be removed from the system once the item involved in the matches is removed. The class \"Items\" contains attributes such as \"item_id\", \"name\", \"description\", \"image\", \"image_embeddings\", \"type\", \"status\", \"category_id\", \"color_id\", \"location_id\", \"student_id\", \"created_at\", \"updated_at\", and methods such as \"student()\", \"category()\", \"color()\", \"location()\", \"matches()\", and \"claims()\". These methods allow to retrieve the student who reported the item, category and color of the item, location of the item lost or found, matches which involves the item, and also claims involves the item. \"Items\" class has a one-to-many relationships with \"Claims\" class for single found item, indicated by \"0...*\" at Claims side and \"1\" at Items side because each found item can be claimed by none or many students at the same time, while a claim must mention which found item would be claimed by the student. Furthermore, \"Items\" class has a one-to-many relationships with \"Claims\" table for single lost item, indicated by \"0...*\" at Claims side and \"0...1\" at Items side . This is because every claim may not include a reported lost item because the student can directly submit claim request for a specific found item without reporting a lost item. Class \"Locations\", \"Colours\" and \"Categories\" have attributes like \"location_id\", \"colour_id\", and \"category_id\" respectively, and have common attributes \"name\", \"created_at\", \"updated_at\" with a method \"items()\" to retrieve items associated with these classes. The relationships are shown as aggregation, where locations, colors, and categories can exist independently but are used to classify multiple items. The relationship between these classes and class \"Items\" is one-to-many, indicated by \"1\" on Locations, Colours and Categories side, and \"0..*\" on \"Items\" side. This is because many items may be located at the same place, can be under the same category, and also share the same color. On the other hand, each item can only be reported lost or found at only one specific location, classified under one category, and associated with only one primary color. ** **","title":"Class Diagram"},{"location":"fyp1_final_report_80369/#wireframe","text":"","title":"Wireframe"},{"location":"fyp1_final_report_80369/#student-user-interface-student-user-interface","text":"{width=\"3.3041666666666667in\" height=\"7.03125in\"} []{#_Toc187864225 .anchor}Figure 3.35: Student Register. Figure 3.35 shows a simple user registration screen for a mobile app. The screen includes fields likes name, email, and password, a button to submit registration request, and a link for users who already have an account to \\\"Sign in.\\\". {width=\"3.3090277777777777in\" height=\"7.041666666666667in\"} []{#_Toc187864226 .anchor}Figure 3.36: Student Login. As shown in Figure 3.36, this is a login screen allows student to enter email and password to login. The user can navigate to 'Sign Up' page by clicking the link 'Sign Up' if the user hasn't created an account yet. {width=\"3.28125in\" height=\"6.98125in\"} []{#_Toc187873592 .anchor}Figure 3.37: Homepage/ Item Listing Page. Figure 3.37 depicts a screen displaying a list of items and allow user to search for and filter the items. The screen includes a search bar, filters for \\\"Found,\\\" \\\"Lost,\\\" and \\\"Recovered\\\" items. Item name and item images will be shown in this screen to give student a quick overview of the items. A navigation bar at the bottom provides access to \\\"Home,\\\" \\\"My Item,\\\" \\\"Notifications,\\\" and \\\"More\\\" sections. {width=\"2.6770833333333335in\" height=\"5.695833333333334in\"} []{#_Toc187863480 .anchor}Figure 3.38: More Option. The screen in Figure 3.38 shows that there are options 'My Claims' and 'Account' popped up once the 'More' button is clicked. {width=\"3.40625in\" height=\"7.247222222222222in\"} []{#_Toc187863481 .anchor}Figure 3.39: Profile Menu The screen in Figure 3.39 depicts a profile menu, where user can have a quick overview of their username and email addresses, and offer option to edit the profile, logout of the system, and a link redirect user to an email application to contact admin. {width=\"3.5833333333333335in\" height=\"7.624305555555556in\"} []{#_Toc187863482 .anchor}Figure 3.40: Confirm to logout. A confirmation message will be shown to the user as shown in Figure 3.40 to confirm their intents to logout after clicking 'Logout' button to avoid any careless mistakes. {width=\"3.4791666666666665in\" height=\"7.402083333333334in\"} []{#_Toc187864231 .anchor}Figure 3.41: Profile Details. Figure 3.41 shows a screen that allow user to edit their profile details. 'Cancel' button is provided to cancel the action of editing and user profile details will be updated once they click 'Edit' button. {width=\"3.2604166666666665in\" height=\"6.936805555555556in\"} []{#_Toc187879235 .anchor}Figure 3.42: Additional Filter There are 3 filters, 'Category', 'Color', and 'Location' for the user to apply to the search result as shown in Figure 3.42. The filter will be applied to the search result right after the 'Apply Filter' button is clicked. All filter will be cleared once the 'Clear' word on the top right corner is clicked. {width=\"3.4895833333333335in\" height=\"7.424305555555556in\"} []{#_Toc187873598 .anchor}Figure 3.43: Item Details of a Found Item. Figure 3.43 illustrates a screen where the user can view more details for a found item and continue to claim it by clicking the button 'Claim item'. {width=\"3.436111111111111in\" height=\"7.3125in\"} []{#_Toc187863486 .anchor}Figure 3.44: Claim Justification. A user has to provide a justification for their claim to convince the admin to approve this claim as shown in Figure 3.44. Clicking 'Submit' button to send a claim request alongside with justification to the admin for approval. {width=\"3.5833333333333335in\" height=\"7.625in\"} []{#_Toc187863487 .anchor}Figure 3.45: Item Details of a Lost Item. Figure 3.45 shows a screen where user can see the details of a lost item. {width=\"3.4583333333333335in\" height=\"7.358333333333333in\"} []{#_Toc187864236 .anchor}Figure 3.46: My Item. Figure 3.46 shows a screen users can tap on 'Lost' or 'Found' tabs to view all the items they have reported as lost or found respectively. {width=\"3.3854166666666665in\" height=\"7.2027777777777775in\"} []{#_Toc187863489 .anchor}Figure 3.47: Item Details of 'My Lost Item'. Figure 3.47 shows a screen displayed once the tab 'Item Details' is clicked. All item details are shown here, and the user can choose to edit or delete the item. {width=\"3.34375in\" height=\"7.114583333333333in\"} []{#_Toc187864238 .anchor}Figure 3.48: Error Message for Edit Item Details. An error message will be displayed to the user explaining the reason they can't edit the item as shown in Figure 3.48. {width=\"3.3958333333333335in\" height=\"7.225in\"} []{#_Toc187863491 .anchor}Figure 3.49: Edit Item page. As shown in Figure 3.49, user is allowed to edit the item details not in the grey area. Clicking 'OK' button to edit the item details and 'Cancel' button to cancel the action and redirect back to previous screen. {width=\"3.578472222222222in\" height=\"7.614583333333333in\"} []{#_Toc187863492 .anchor}Figure 3.50: Confirm to Edit Item Details. Figure 3.50 depicts that the user will be prompted to confirm edit the item details or cancel the action to edit. {width=\"3.426388888888889in\" height=\"7.291666666666667in\"} []{#_Toc187864241 .anchor}Figure 3.51: Confirm to Delete Item. Screen in Figure 3.51 shows the user is prompted to confirm delete or cancel delete with the buttons 'Delete' and 'Cancel' provided. {width=\"3.43125in\" height=\"7.302083333333333in\"} []{#_Toc187879245 .anchor}Figure 3.52: Error to Delete Item. Figure 3.52 shows an error message during editing an item. {width=\"3.5833333333333335in\" height=\"7.624305555555556in\"} []{#_Toc187863495 .anchor}Figure 3.53: Potential Matches (My Item). By clicking the tab 'Potential Matches' as shown in Figure 3.53, the screen displaying the lists of found items which may be a potential match for lost item that user has reported, with an overview of the status of the claim associated with the match, found item name, description and similarity score. {width=\"3.4583333333333335in\" height=\"7.358333333333333in\"} []{#_Toc187864244 .anchor}Figure 3.54: Accept Potential Matches and Claim Item. Click 'Claim Item' button as shown in Figure 3.54 to submit a claim request for the item. {width=\"3.5208333333333335in\" height=\"7.490972222222222in\"} []{#_Toc187879248 .anchor}Figure 3.55: Claim Justification. User has to provide to justification for the claim of an item as shown in Figure 3.55. {width=\"3.3958333333333335in\" height=\"7.225in\"} []{#_Toc187873611 .anchor}Figure 3.56: My Claims (My Item). Clicking on tab 'My Claims' will display all the overview of past and ongoing claim for the potential matches of item suggested to the user as shown in Figure 3.56. {width=\"3.4902777777777776in\" height=\"7.427083333333333in\"} []{#_Toc187873612 .anchor}Figure 3.57: Claim Details (My Claims). Figure 3.57 shows all the details related to a claim after the user click on specific claim. {width=\"3.602777777777778in\" height=\"7.666666666666667in\"} []{#_Toc187873613 .anchor}Figure 3.58: My Found Item (Item Details). For the reported found item, there is only one tab which is 'Item Details' available where shows the item details and status of the item, active or resolved as shown in Figure 3.58. {width=\"3.6041666666666665in\" height=\"7.669444444444444in\"} []{#_Toc187863501 .anchor}Figure 3.59: Report Lost/ Found Item. Figure 3.59 shows a form for users to report their lost items or found items. {width=\"3.359722222222222in\" height=\"7.149305555555555in\"} []{#_Toc187863502 .anchor}Figure 3.60: Error Message of Reporting Item. Figure 3.60 shows an error message displayed when there is empty field. {width=\"3.48125in\" height=\"7.407638888888889in\"} []{#_Toc187863503 .anchor}Figure 3.61: Notifications Notifications are all listed at the notification page as shown in Figure 3.61. . {width=\"3.7006944444444443in\" height=\"7.875in\"} []{#_Toc187878032 .anchor}Figure 3.62: My Claims. Figure 3.62 shows the screen where all claims are listed, not limited to specific item.","title":"Student User Interface {#student-user-interface}"},{"location":"fyp1_final_report_80369/#admins-user-interface-admins-user-interface","text":"{width=\"5.072916666666667in\" height=\"3.3680555555555554in\"} []{#_Toc187863505 .anchor}Figure 3.63: Admin Login. Figure 3.63 illustrates a login webpage for admin. Admin need to provide email address and password to login. {width=\"4.8875in\" height=\"3.245138888888889in\"} []{#_Toc187873619 .anchor}Figure 3.64: Admin Dashboard. Figure 3.64 depicts a dashboard for admin to have a quick overview on no. of registered students, no. of pending claims, no. of claimed item, and recovery rate. {width=\"5.768055555555556in\" height=\"3.829861111111111in\"} []{#_Toc187864255 .anchor}Figure 3.65: Admin Profile Menu. Figure 3.65 shows the screen with profile menu and logout option appears after the 'person' icon is clicked. {width=\"5.46875in\" height=\"3.6305555555555555in\"} []{#_Toc187864256 .anchor}Figure 3.66: Manage Students. Figure 3.66 shows the screen that the user can view or delete user profile. {width=\"5.3597222222222225in\" height=\"3.558333333333333in\"} []{#_Toc187873622 .anchor}Figure 3.67: Confirm Delete Student's Account. Figure 3.67 shows a screen that the admin confirms to delete the student's account. {width=\"5.490972222222222in\" height=\"3.6458333333333335in\"} []{#_Toc187864258 .anchor}Figure 3.68: Review Claim Request. Figure 3.68 shows all the found items request to be claimed by the students in the table form. {width=\"5.768055555555556in\" height=\"3.829861111111111in\"} []{#_Toc187873624 .anchor}Figure 3.69: Claim Requests. Figure 3.69 shows a section displaying the details of found item and lost item for the user to compare the similarity between the items easily. Admin can switch to compare with item in another claim request by clicking the 'Compare' button. After clicking 'Compare button', the section displaying previous lost item details will be updated with the associated lost item details. {width=\"5.038194444444445in\" height=\"3.345138888888889in\"} []{#_Toc187878040 .anchor}Figure 3.70: Confirm Approve Claim Request. Figure 3.70 shows the screen admin need to confirm their intents to approve the claim request. {width=\"4.906944444444444in\" height=\"3.2576388888888888in\"} []{#_Toc187879264 .anchor}Figure 3.71: Confirm Reject Claim Request. Figure 3.71 shows the screen admin need to confirm their intents to reject the claim request. {width=\"4.847916666666666in\" height=\"3.21875in\"} []{#_Toc187873627 .anchor}Figure 3.72: Manage Item Category. Figure 3.72 shows a screen that admin can create, view, edit and delete the item category options. {width=\"4.907638888888889in\" height=\"3.2583333333333333in\"} []{#_Toc187873628 .anchor}Figure 3.73: Manage Item Color. Figure 3.73 shows a screen that admin can create, view, edit and delete the item color options. {width=\"5.014583333333333in\" height=\"3.3291666666666666in\"} []{#_Toc187879267 .anchor}Figure 3.74: Manage Item Location. Figure 3.74 shows a screen that admin can create, view, edit and delete the location options. {width=\"5.05in\" height=\"3.3534722222222224in\"} []{#_Toc187863517 .anchor}Figure 3.75: Claim Approval History Overview. Figure 3.75 shows an overview of all the claims that were approved or rejected by the admin. {width=\"5.768055555555556in\" height=\"3.829861111111111in\"} []{#_Toc187873631 .anchor}Figure 3.76: Claim Approval Details. Figure 3.76 depicts a screen where more details of a claim are displayed to the admin, which include the lost item details and found item details alongside the status of the claim (approved or rejected).","title":"Admin's User Interface {#admins-user-interface}"},{"location":"fyp1_final_report_80369/#implementation-phase","text":"The development of the system for lost and found begins right after the phase of system design. This is the implementation phase where coding is necessary for the translation of the system design into an effective application. The proposed system will be both a mobile and a web app. In developing the web application, the front-end pages will be built using HTML, CSS, Bootstrap, and JavaScript. The mobile application will be done using Flutter, which gives an intuitive, responsive UI for mobile use. An API endpoint will be attached to the back-end server that connects through the API, facilitating the communication of the mobile application with the backend for actions: registering an item; an image-matching request coming from the user\\'s side; and approvals by admins. The proposed backend server will be powered by the Laravel framework, which will handle all the server-side activities: processing the requests, interaction with the database, and execution of the image matching algorithm. A database will be set up for storing information regarding users, item details, image information, and match results. It will also run on the API server: hosting the pre-trained AI model for doing image comparisons that could suggest possible matches of lost-found pairs. The AI model connects with the back-end server for automated matching.","title":"Implementation Phase"},{"location":"fyp1_final_report_80369/#verification-phase","text":"This stage is focused on validating whether the system meets its requirements or not. Accordingly, test cases are designed based on the system. Also, the functional testing ensures that main features are functioning according to specifications and the usability testing will make the user interface of the system in an accessible manner. This ensures that the system is on target and also delivers initial design and requirement by users.","title":"Verification Phase"},{"location":"fyp1_final_report_80369/#maintenance-phase","text":"This is the phase where all the bugs encountered will be addressed to ensure user satisfaction and prolongs the system's lifespan.","title":"Maintenance Phase"},{"location":"fyp1_final_report_80369/#conclusion_1","text":"In short, requirement analysis and system design phases of the Waterfall model is discussed in detailed in Chapter 3 which facilitate the development of the system in Chapter 4. In the requirement analysis phase, undergraduate students in UNIMAS are taken as the sample for the questionnaire to gather system requirements. Apart from that, use case diagram and use case specifications are built to ensure critical functionalities of the systems are considered and not missed. In the system design phase, system architectural design, activity diagrams, and class diagrams are designed. Furthermore, wireframes are designed to outline the user interface of the proposed system. This chapter ends with brief introduction to the other phases taken part in Waterfall.","title":"Conclusion"},{"location":"fyp1_final_report_80369/#references-references-unnumbered","text":"About Us . (2024). Lost & Found Network. https://lostandfoundnetworks.com/page/About%20Us Anas, M., Saini, S., Agarwal, N., Khanna, A., Yadav, A., & Kaur, K. (2023). An Assistive Tool for Finding Lost Items: A Review, INTERNATIONAL JOURNAL OF ENGINEERING RESEARCH & TECHNOLOGY (IJERT) , 12(11). https://doi.org/10.17577/IJERTV12IS110077 App Store. (2023, November 11). Lost'NFound . App Store. https://apps.apple.com/my/app/lostnfound/id6470925549?platform=ipad Atlassian, B. (n.d.). Waterfall Methodology for Project Management | Atlassian. Atlassian. https://www.atlassian.com/agile/project-management/waterfall methodology Banoula, M. (2024, September 3). What is Tensorflow? Deep Learning Libraries & Program Elements . Simplilearn.com. https://www.simplilearn.com/tutorials/deep-learning-tutorial/what-is - tensorflow Download and install Android Studio | Android Developers . (2024). Android Developers. https://developer.android.com/codelabs/basic-android-kotlin - compose-install-android-studio#0 Fastfwd. (2022, March 14). What is Laravel? A Beginner's Introduction - fastfwd . Fastfwd. https://www.fastfwd.com/what-is-laravel/ GeeksforGeeks. (2023, December 29). Requirements Gathering Introduction, processes, benefits and tools. GeeksforGeeks. https://www.geeksforgeeks.org/requirements-gathering introduction- processes- benefits-and-tools/ GeeksforGeeks. (2024b, August 5). Bootstrap Tutorial . GeeksforGeeks. https://www.geeksforgeeks.org/bootstrap/ Habersham, L. (2021, June 16). Lost and Found: 4 Tips for Managing Commonly Misplaced Items. T-mobile. https://www.t-mobile.com/news/devices/lost -and-found-4-tips-for managing-commonly-misplaced-items Hoory, L., & Bottorff, C. (2024, October 15). What is waterfall methodology? Here's how it can help your project management strategy. Forbes Advisor. https://www.forbes.com/advisor/business/what-is-waterfall-methodology/ Jones, H. (2024, May 9). Improving cross-platform compatibility enhances digital accessibility . Baseline. https://www.baselinemag.com/news/improving-cross - platform-compatibility-enhances-digital-accessibility/ Karunaratne, A. (2022, September 17). Laragon is a modern, simple, and flexible Windows Development Environment that provides support for multiple PHP, Apache, and MySQL versions, with quick HTTPS setup, Quick-app templates, Composer, npm, and more . PHP.Watch. https://php.watch/articles/laragon - windows-php Laoyan, S. (2024, April 26). Guide to Waterfall Methodology: Free Template & Examples [2024] \u2022 Asana. Asana. https://asana.com/resources/waterfall -project-management methodology Lost and Found - apps on Google Play . (2024). https://play.google.com/store/apps/details?hl=en&id=com.techju.developer.lo tandfound Meet Android Studio . (n.d.). Android Developers. https://developer.android.com/studio/intro Nikitin, V. (2024, April). Software Development Methodologies: Types and comparison. Itransition. Onipe, D. T. (2023, May 7). Introduction to Flutter: Getting Started with Cross- Platform Development . DEV Community. https://dev.to/bigdexter/introduction-to-flutter-getting-started-with-cross - platform-development-mmg Petkovic, J., Duench, S., Trawin, J., Dewidar, O., Pardo, J. P., Simeon, R., DesMeules, M., Gagnon, D., Roberts, J. H., Hossain, A., Pottie, K., Rader, T., Tugwell, P., Yoganathan, M., Presseau, J., & Welch, V. (2021). Behavioural interventions delivered through interactive social media for health behaviour change, health outcomes, and health equity in the adult population. Cochrane Library , 2021 (6). https://doi.org/10.1002/14651858.cd012932.pub2 RemoteScout. (2023, September 13). Das Wasserfallmodell in der Softwareentwicklung. RemoteScout24 . https://remotescout24.com/en/blog/1217 - waterfall-model-in-software- development Run apps on the Android Emulator . (2024). Android Developers. https://developer.android.com/studio/run/emulator Simplilearn. (2024, July 24). What is FastAPI: The future of Modern Web development . Simplilearn.com. https://www.simplilearn.com/what-is-fastapi article Transfer learning and fine-tuning . (2024). TensorFlow. https://www.tensorflow.org/tutorials/images/transfer_learning Visual Studio vs Visual Studio Code - What's Best In 2024? (2024). https://www.turing.com/kb/ultimate-guide-visual-studio-vs-visual-studio-code","title":"References {#references .unnumbered}"},{"location":"fyp1_final_report_80369/#_1","text":"","title":""},{"location":"fyp1_final_report_80369/#appendix-a-appendix-a-unnumbered","text":"{width=\"7.800694444444445in\" height=\"4.395833333333333in\"} []{#_Toc187876565 .anchor}Figure A.0.1: Project Gantt Chart for FYP1. {width=\"9.395833333333334in\" height=\"4.230555555555555in\"} []{#_Toc187879271 .anchor}Figure A.0.2: Project Gantt Chart for FYP1. {width=\"9.693055555555556in\" height=\"5.11875in\"} []{#_Toc187879272 .anchor}Figure A.0.3: Project Gantt Chart for FYP2.","title":"Appendix A {#appendix-a .unnumbered}"},{"location":"fyp1_final_report_80369/#_2","text":"","title":""},{"location":"fyp1_final_report_80369/#appendix-b-appendix-b-unnumbered","text":"{width=\"4.790972222222222in\" height=\"7.691666666666666in\"} []{#_Toc187879273 .anchor}Figure B.0.1: Survey Form Description. {width=\"3.963888888888889in\" height=\"8.525in\"} []{#_Toc187878051 .anchor}Figure B.0.2: Section I for Demographics. {width=\"4.279861111111111in\" height=\"8.191666666666666in\"} []{#_Toc187879275 .anchor}Figure B.0.3: Section II for Current Experience and Challenges Faced. {width=\"5.496527777777778in\" height=\"8.35in\"} []{#_Toc187879276 .anchor}Figure B.0.4: Section II for Current Experience and Challenges Faced. {width=\"3.6277777777777778in\" height=\"8.975in\"} []{#_Toc187879277 .anchor}Figure B.0.5: Section III for Desired Features and Feedback.","title":"Appendix B {#appendix-b .unnumbered}"}]}